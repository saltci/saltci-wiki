<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Saltci Wiki</title>
  
  <subtitle>Linking Everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://saltci.xyz/"/>
  <updated>2020-11-27T07:02:13.790Z</updated>
  <id>http://saltci.xyz/</id>
  
  <author>
    <name>Saltci</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongoengine</title>
    <link href="http://saltci.xyz/Database/MongoDB/mongoengine/"/>
    <id>http://saltci.xyz/Database/MongoDB/mongoengine/</id>
    <published>2020-08-30T02:42:21.000Z</published>
    <updated>2020-11-27T07:02:13.790Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MongoEngine是MongoDB的一个ODM(Object-Document Mapper)框架,它提供了类似Django的语法来操作MongoDB数据库.<br>MongoEngine是一个对象文档映射器(ODM),相当于一个基于SQL的对象关系映射器(ORM)<br>pymongo来操作MongoDB数据库,但是直接把对于数据库的操作代码都写在脚本中,这会让应用的代码耦合性太强,而且不利于代码的优化管理.<br>一般应用都是使用MVC框架来设计的,为了更好地维持MVC结构,需要把数据库操作部分作为model抽离出来,这就需要借助Mongoengine,Mongoengine提供的抽象是基于类的,创建的所有模型都是类,我们可以跟关系型数据库的Python客户端MySQLdb,以及ORM SQLAlchemy/Django ORM比较一下,PyMongo相当于MySQLdb,Mongoengine相当于SQLAlchemy,SQLAlchemy是基于MySQLdb之上的,MongoEngine是基于PyMongo的.</p></blockquote><p>官方英文文档地址: <a href="http://docs.mongoengine.org/tutorial.html" rel="external nofollow noopener noreferrer" target="_blank">http://docs.mongoengine.org/tutorial.html</a></p><h1 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h1><h2 id="document"><a href="#document" class="headerlink" title="document"></a>document</h2><blockquote><p><code>document</code>是静态文档,这种文档定义好了之后,不能添加新的字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> Document, StringField</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(Document)</span>:</span></span><br><span class="line">    title = StringField(max_length=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    meta = &#123;</span><br><span class="line">        <span class="string">'db_alias'</span>: <span class="string">'db_name'</span>,  <span class="comment"># 数据库名字</span></span><br><span class="line">        <span class="string">'collection'</span>: <span class="string">'people'</span>,  <span class="comment"># 集合的名字,如果不定义就用class的小写</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="DynamicDocument"><a href="#DynamicDocument" class="headerlink" title="DynamicDocument"></a>DynamicDocument</h2><blockquote><p><code>dynamicDocument</code>可以实现随意添加字段的功能,但动态文档中的字段不能以<code>_</code>开头<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span><span class="params">(DynamicDocument)</span>:</span></span><br><span class="line">    title = StringField(max_length=<span class="number">200</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># Create a new page and add tags</span></span><br><span class="line">    page = Page(title=<span class="string">'Using MongoEngine'</span>)</span><br><span class="line">    page.tags = [<span class="string">'mongodb'</span>, <span class="string">'mongoengine'</span>]</span><br><span class="line">    page.save()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># query</span></span><br><span class="line">    count = Page.objects(tags=<span class="string">'mongodb'</span>).count()</span><br><span class="line">    print(count)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="EmbeddedDocument"><a href="#EmbeddedDocument" class="headerlink" title="EmbeddedDocument"></a>EmbeddedDocument</h2><blockquote><p><code>EmbeddedDocument</code>是嵌入文档,MongoDB能够在文档中嵌入文档.嵌入文档模式并不是在数据库中真正形成一个集合,而实作为某个集合的字段出现.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Document)</span>:</span></span><br><span class="line">    name = StringField(max_length=<span class="number">20</span>)</span><br><span class="line">    password = StringField(max_length=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span><span class="params">(EmbeddedDocument)</span>:</span></span><br><span class="line">    content = StringField()</span><br><span class="line">    name = StringField(max_length=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Document)</span>:</span></span><br><span class="line">    title = StringField(max_length=<span class="number">120</span>, required=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 外键,reverse_delete_rule=CASCADE,传统数据库中的级联删除</span></span><br><span class="line">    <span class="comment"># MapFields和DictFields当前不支持自动处理已删除的引用。</span></span><br><span class="line">    author = ReferenceField(User, reverse_delete_rule=<span class="literal">True</span>)</span><br><span class="line">    tags = ListField(StringField(max_length=<span class="number">30</span>))  <span class="comment"># 列表类型,listfield内第一个参数就是限制列表中的元素类型</span></span><br><span class="line">    comments = ListField(EmbeddedDocumentField(Comment))</span><br><span class="line"></span><br><span class="line">    meta = &#123;</span><br><span class="line">        <span class="string">'allow_inheritance'</span>: <span class="literal">True</span>  <span class="comment"># allow_inheritance=True允许继承默认是不被允许的,当以后需要添加新的字段时,直接继承这个类就好了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 嵌入式文档添加数据的方式</span></span><br><span class="line">    user = User(name=<span class="string">"jony"</span>, password=<span class="string">"123456"</span>)</span><br><span class="line">    user.save()</span><br><span class="line"></span><br><span class="line">    article = Article(title=<span class="string">'Mongoengine Documentation'</span>, author=user)</span><br><span class="line">    article.tags = [<span class="string">'mongodb'</span>, <span class="string">'python'</span>]</span><br><span class="line"></span><br><span class="line">    comment_1 = Comment(name=<span class="string">"小明"</span>, content=<span class="string">"真的好棒"</span>)</span><br><span class="line">    comment_2 = Comment(name=<span class="string">"小红"</span>, content=<span class="string">"太好了"</span>)</span><br><span class="line">    article.comments = [comment_1, comment_2]</span><br><span class="line">    article.save()</span><br></pre></td></tr></table></figure><p>结果:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span>: ObjectId(<span class="string">"5f4b5505f21838559032874f"</span>),</span><br><span class="line">    <span class="attr">"_cls"</span>: <span class="string">"Article"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"Mongoengine Documentation"</span>,</span><br><span class="line">    <span class="attr">"author"</span>: ObjectId(<span class="string">"5f4b5504f21838559032874e"</span>),</span><br><span class="line">    <span class="attr">"tags"</span>: [</span><br><span class="line">        <span class="string">"mongodb"</span>,</span><br><span class="line">        <span class="string">"python"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"comments"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"content"</span>: <span class="string">"真的好棒"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"小明"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"content"</span>: <span class="string">"太好了"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"小红"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h1><h2 id="listfield"><a href="#listfield" class="headerlink" title="listfield"></a>listfield</h2><blockquote><p>支持一个列表,它的第一个参数用来指定列表中元素的类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span><span class="params">(Document)</span>:</span></span><br><span class="line">    tags = ListField(StringField(max_length=<span class="number">50</span>))</span><br></pre></td></tr></table></figure><h2 id="ReferenceField"><a href="#ReferenceField" class="headerlink" title="ReferenceField"></a>ReferenceField</h2><blockquote><p><code>ReferenceField</code>相当于传统数据库中的外键,用于关联其它集合</p></blockquote><p><strong>一对一</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span><span class="params">(Document)</span>:</span></span><br><span class="line">    name = StringField()</span><br><span class="line">    boss = ReferenceField(<span class="string">'self'</span>)   <span class="comment"># 如果要引用的类名没有被定义,则使用self</span></span><br><span class="line">    profile_page = ReferenceField(<span class="string">"ProfilePage"</span>)  <span class="comment"># 参数为要引用的类名</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span><span class="params">(Document)</span>:</span></span><br><span class="line">    content = StringField()</span><br></pre></td></tr></table></figure></p><p><strong>一对多</strong></p><blockquote><p>一对多需要用ListField,也可以叫一引多,把ReferenceField放在一的集合中.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Document)</span>:</span></span><br><span class="line">    name = StringField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span><span class="params">(Document)</span>:</span></span><br><span class="line">    content = StringField()</span><br><span class="line">    authors = ListField(ReferenceField(User))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    bob = User(name=<span class="string">"Bob jones"</span>).save()</span><br><span class="line">    john = User(name=<span class="string">"John smith"</span>).save()</span><br><span class="line"></span><br><span class="line">    Page(content=<span class="string">"Test page"</span>, authors=[bob, john]).save()</span><br><span class="line">    Page(content=<span class="string">"Another page"</span>, authors=[john]).save()</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>级连删除</strong></p><blockquote><p>本例中的声明意味着,当删除雇员对象时,引用该雇员的ProfilePage的配置文件页也将被删除.如果删除了整批员工,则链接的所有配置文件页也将删除.<br>默认项为:mongoengine.DO_NOTHING,不做任何操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span><span class="params">(Document)</span>:</span></span><br><span class="line">    employee = ReferenceField(<span class="string">'Employee'</span>,reverse_delete_rule=mongoengine.CASCADE)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="GenericReferenceField"><a href="#GenericReferenceField" class="headerlink" title="GenericReferenceField"></a>GenericReferenceField</h2><blockquote><p>该字段的作用是设置某个集合用来引用任何的集合.<br>注意：使用genericreferencefields的效率比标准referencefields稍低，因此，如果您只引用一种文档类型，则首选标准referencefield。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span><span class="params">(Document)</span>:</span></span><br><span class="line">    url = StringField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(Document)</span>:</span></span><br><span class="line">    title = StringField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bookmark</span><span class="params">(Document)</span>:</span></span><br><span class="line">    bookmark_object = GenericReferenceField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    link = Link(url=<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">    link.save()</span><br><span class="line"></span><br><span class="line">    post = Post(title=<span class="string">'Using MongoEngine'</span>)</span><br><span class="line">    post.save()</span><br><span class="line"></span><br><span class="line">    Bookmark(bookmark_object=link).save()</span><br><span class="line">    Bookmark(bookmark_object=post).save()</span><br></pre></td></tr></table></figure><p><strong>输出</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span>: ObjectId(<span class="string">"5f4b603ef9ed40279b019972"</span>),</span><br><span class="line">    <span class="attr">"bookmark_object"</span>: &#123;</span><br><span class="line">        <span class="attr">"_cls"</span>: <span class="string">"Link"</span>,</span><br><span class="line">        "_ref": DBRef("link", ObjectId("5f4b603ef9ed40279b019970"))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span>: ObjectId(<span class="string">"5f4b603ef9ed40279b019973"</span>),</span><br><span class="line">    <span class="attr">"bookmark_object"</span>: &#123;</span><br><span class="line">        <span class="attr">"_cls"</span>: <span class="string">"Post"</span>,</span><br><span class="line">        "_ref": DBRef("post", ObjectId("5f4b603ef9ed40279b019971"))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="LazyReferenceField"><a href="#LazyReferenceField" class="headerlink" title="LazyReferenceField"></a>LazyReferenceField</h2><blockquote><p>这个字段是懒惰关联字段,相当于懒加载,和迭代器作用差不多,什么时候调用fetch方法什么时候产生数据,不像<code>referenceField</code>字段那样直接得出数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> test.helper <span class="keyword">import</span> client</span><br><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span><span class="params">(DynamicDocument)</span>:</span></span><br><span class="line">    add_name = StringField(max_length=<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(DynamicDocument)</span>:</span></span><br><span class="line">    name = StringField(max_length=<span class="number">22</span>)</span><br><span class="line">    adds = LazyReferenceField(Address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    address = Address(add_name=<span class="string">'Shanghai'</span>).save()</span><br><span class="line"></span><br><span class="line">    xiaohong = People(name=<span class="string">'小红'</span>, adds=address).save()</span><br></pre></td></tr></table></figure><p><strong>数据库信息</strong><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span>: ObjectId(<span class="string">"5f4b64292651a4986f9b57c9"</span>),</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"小红"</span>,</span><br><span class="line">    <span class="attr">"adds"</span>: ObjectId(<span class="string">"5f4b64292651a4986f9b57c8"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>查询小红的地址</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询小红的地址</span></span><br><span class="line">p1 = People.objects.filter(name=<span class="string">"小红"</span>).first()</span><br><span class="line">print(p1.adds)  <span class="comment"># 这样是获取不到地址对象的</span></span><br><span class="line">print(<span class="string">'使用fetch:'</span>, p1.adds.fetch())  <span class="comment"># 通过fetch方法才能获取到小红对应的地址对象</span></span><br><span class="line">print(<span class="string">'小红的地址为:'</span>, p1.adds.fetch().add_name)  <span class="comment"># 获取地址</span></span><br></pre></td></tr></table></figure></p><p>注: 注意使用了lazyReference字段后,获取引用的对象时要用fetch()方法来获取,但是可以直接获取它的主键值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询小红的地址</span></span><br><span class="line">p1 = People.objects.filter(name=<span class="string">"小红"</span>).first()</span><br><span class="line">print(p1.adds.id)</span><br><span class="line">print(p1.adds.pk)</span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p><strong>Unique</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Document)</span>:</span></span><br><span class="line">    username = StringField(unique=<span class="literal">True</span>)  <span class="comment"># 唯一</span></span><br><span class="line">    first_name = StringField()</span><br><span class="line">    last_name = StringField(unique_with=<span class="string">'first_name'</span>)  <span class="comment"># 联合唯一</span></span><br></pre></td></tr></table></figure></p><p><strong>Skipping Document validation on save</strong></p><blockquote><p>Mongoengine中的字段默认有检查功能,也就是valid,如果你要保存数据的时候不需要他检验可以这样设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Recipient</span><span class="params">(Document)</span>:</span></span><br><span class="line">    name = StringField()</span><br><span class="line">    email = EmailField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    recipent = Recipient(name=<span class="string">"admin"</span>, email=<span class="string">"root@localhost"</span>)</span><br><span class="line">    <span class="comment"># recipent.save()  # will raise a ValidationError while saving</span></span><br><span class="line">    recipent.save(validate=<span class="literal">False</span>)  <span class="comment"># won't raise a ValidationError</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>修改数据库的名字</strong></p><blockquote><p>默认的集合名字就是当前类的小写,如果你要更改集合的名字,可以这样操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span><span class="params">(Document)</span>:</span></span><br><span class="line">    title = StringField(max_length=<span class="number">200</span>,required=<span class="literal">True</span>)</span><br><span class="line">    meta = &#123;<span class="string">"collection"</span>:<span class="string">"cmsPage"</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对集合中的文档的个数和大小限制,可以这样做,默认为10M,以字节显示<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span><span class="params">(Document)</span>:</span></span><br><span class="line">    ip_address = StringField()</span><br><span class="line">    meta = &#123;<span class="string">"max_documents"</span>: <span class="number">1000</span>,<span class="string">"max_size"</span>: <span class="number">2000000</span>&#125;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><blockquote><p>可选地在前面加上“-”（以表示降序排序，即最高的第一个)</p></blockquote><h2 id="写在模型中"><a href="#写在模型中" class="headerlink" title="写在模型中"></a>写在模型中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> test.helper <span class="keyword">import</span> client</span><br><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(Document)</span>:</span></span><br><span class="line">    title = StringField()</span><br><span class="line">    published_date = DateTimeField()</span><br><span class="line"></span><br><span class="line">    meta = &#123;</span><br><span class="line">        <span class="string">'ordering'</span>: [<span class="string">'-published_date'</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="写在查询语句中用order-by方法"><a href="#写在查询语句中用order-by方法" class="headerlink" title="写在查询语句中用order_by方法"></a>写在查询语句中用order_by方法</h2><blockquote><p>只能用在单表查询中,不能用在<code>aggregate</code>中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = Users.objects(**query).order_by(<span class="string">"-role"</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="在aggregate中使用sort排序"><a href="#在aggregate中使用sort排序" class="headerlink" title="在aggregate中使用sort排序"></a>在<code>aggregate</code>中使用<code>sort</code>排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pipeline_list = [</span><br><span class="line">                &#123;<span class="string">"$sort"</span>: &#123;<span class="string">'user_role'</span>: <span class="number">-1</span>&#125;&#125;,</span><br><span class="line">                &#123;<span class="string">'$lookup'</span>: &#123;</span><br><span class="line">                    <span class="string">'from'</span>: <span class="string">'shops'</span>,</span><br><span class="line">                    <span class="string">'localField'</span>: <span class="string">'shop'</span>,</span><br><span class="line">                    <span class="string">'foreignField'</span>: <span class="string">'_id'</span>,</span><br><span class="line">                    <span class="string">'as'</span>: <span class="string">'staff_shop'</span></span><br><span class="line">                &#125;&#125;,</span><br><span class="line">                &#123;<span class="string">'$lookup'</span>: &#123;</span><br><span class="line">                    <span class="string">'from'</span>: <span class="string">'users'</span>,</span><br><span class="line">                    <span class="string">'localField'</span>: <span class="string">'user'</span>,</span><br><span class="line">                    <span class="string">'foreignField'</span>: <span class="string">'_id'</span>,</span><br><span class="line">                    <span class="string">'as'</span>: <span class="string">'staff_user'</span></span><br><span class="line">                &#125;&#125;,</span><br><span class="line">                &#123;<span class="string">'$match'</span>: query_data&#125;,</span><br><span class="line">                &#123;<span class="string">'$unwind'</span>: <span class="string">"$staff_shop"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'$unwind'</span>: <span class="string">"$staff_user"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">'$project'</span>: &#123;<span class="string">'_id'</span>: <span class="literal">True</span>, <span class="string">'created_timestamp'</span>: <span class="literal">True</span>, <span class="string">'updated_timestamp'</span>: <span class="literal">True</span>, <span class="string">'name'</span>: <span class="literal">True</span>,</span><br><span class="line">                              <span class="string">'user_role'</span>: <span class="literal">True</span>, <span class="string">'replenish_goods_permission'</span>: <span class="literal">True</span>, <span class="string">'staff_shop.name'</span>: <span class="literal">True</span>,</span><br><span class="line">                              <span class="string">'staff_shop.rates'</span>: <span class="literal">True</span>, <span class="string">'staff_shop._id'</span>: <span class="literal">True</span>, <span class="string">'staff_user.phone_number'</span>: <span class="literal">True</span>,</span><br><span class="line">                              <span class="string">'staff_user.profile'</span>: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                              &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">result = list(Model.objects().aggregate(*pipeline_list))</span><br></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><blockquote><p>继承后的类并不会在数据库中创建新的集合,而是作为基类的属性存在.<br>对于继承的集合我们要注意: 查询的时候既可以用基类查也可用子类查,但添加的时候只能用子类添加,不能用基类添加</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> test.helper <span class="keyword">import</span> client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span><span class="params">(Document)</span>:</span></span><br><span class="line">    title = StringField(max_length=<span class="number">200</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    meta = &#123;<span class="string">"allow_inheritance"</span>: <span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Also stored in the collection named 'page'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatedPage</span><span class="params">(Page)</span>:</span></span><br><span class="line">    date = DateTimeField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    DatedPage(title=<span class="string">'你好'</span>, date=datetime.now()).save()</span><br></pre></td></tr></table></figure><p><strong>数据库信息</strong><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span>: ObjectId(<span class="string">"5f4b874d47ad45b9f7db6730"</span>),</span><br><span class="line">    <span class="attr">"_cls"</span>: <span class="string">"Page.DatedPage"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"你好"</span>,</span><br><span class="line">    <span class="attr">"date"</span>: ISODate(<span class="string">"2020-08-30T19:02:37.057Z"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="自定义验证规则"><a href="#自定义验证规则" class="headerlink" title="自定义验证规则"></a>自定义验证规则</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> test.helper <span class="keyword">import</span> client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Essay</span><span class="params">(Document)</span>:</span></span><br><span class="line">    status = StringField(choices=(<span class="string">'Published'</span>, <span class="string">'Draft'</span>), required=<span class="literal">True</span>)</span><br><span class="line">    pub_date = DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Ensures that only published essays have a `pub_date` and</span></span><br><span class="line"><span class="string">        automatically sets `pub_date` if essays is published and `pub_date`</span></span><br><span class="line"><span class="string">        is not set</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.status == <span class="string">'Draft'</span> <span class="keyword">and</span> self.pub_date <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            msg = <span class="string">'Draft entries should not have a publication date.'</span></span><br><span class="line">            <span class="keyword">raise</span> ValidationError(msg)</span><br><span class="line">        <span class="comment"># Set the pub_date for published if not set already</span></span><br><span class="line">        <span class="keyword">if</span> self.status == <span class="string">'Published'</span> <span class="keyword">and</span> self.pub_date <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.pub_date = datetime.now()</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.cnblogs.com/sticker0726/articles/11407755.html" rel="external nofollow noopener noreferrer" target="_blank">mongoengine的文档类型和字段和排序和继承</a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;MongoEngine是MongoDB的一个ODM(Object-Document Mapper)框架,它提供了类似Django的语法来操作MongoDB数据库.&lt;br&gt;MongoEngine是一个对象文档映射器(ODM),相当于一个基于SQL的对
      
    
    </summary>
    
      <category term="Database" scheme="http://saltci.xyz/categories/Database/"/>
    
      <category term="MongoDB" scheme="http://saltci.xyz/categories/Database/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://saltci.xyz/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Python操作redis</title>
    <link href="http://saltci.xyz/Database/Redis/Python%E6%93%8D%E4%BD%9CRedis/"/>
    <id>http://saltci.xyz/Database/Redis/Python操作Redis/</id>
    <published>2020-02-07T10:36:00.000Z</published>
    <updated>2020-11-27T07:02:13.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h1><p><strong>安装redis</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure></p><p><strong>redis连接</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上decode_response=True，写入的键值对中的value为str类型，不加入这个参数则为字节类型</span></span><br><span class="line">client = redis.Redis(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client.set(<span class="string">'name'</span>,<span class="string">'eiheihei'</span>)</span><br><span class="line"><span class="comment"># 取出键name对应的值</span></span><br><span class="line">print(client.get(<span class="string">'name'</span>))</span><br><span class="line">print(type(client.get(<span class="string">'name'</span>)))</span><br></pre></td></tr></table></figure></p><p><strong>连接池</strong><br><code>redis</code>使用<code>ConnectionPool</code>来管理对一个<code>redis server</code>的所有连接，避免每次建立，释放连接的开销。默认每个Redis实例都会维护一个自己的连接池。<br>可以直接建立一个连接池，然后作为<code>Redis</code>的参数，就可以实现多个<code>Redis</code>实例共享一个连接池。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client = redis.Redis(connection_pool=pool)</span><br><span class="line">client.set(<span class="string">"gender"</span>,<span class="string">"male"</span>)</span><br><span class="line">print(client.get(<span class="string">'gender'</span>))</span><br></pre></td></tr></table></figure></p><h1 id="字符串的创建，查询和修改"><a href="#字符串的创建，查询和修改" class="headerlink" title="字符串的创建，查询和修改"></a>字符串的创建，查询和修改</h1><p><strong>set(name,value,ex=None,nx=False,xx=False)</strong></p><ul><li><code>ex</code>: 过期时间(秒)</li><li><code>px</code>: 过期时间(毫秒)</li><li><code>nx</code>: 如果设置为<code>True</code>，则只有name不存在的时，当前<code>set</code>操作才执行(新建)</li><li><code>xx</code>: 如果设置为<code>True</code>, 则只有name存在时，当前<code>set</code>操作才执行(修改)</li></ul><p>1.<code>ex</code>，过期时间(秒)，这里过期时间是3秒，3秒后键food的值就变成<code>None</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client = redis.Redis(connection_pool=pool)</span><br><span class="line">client.set(<span class="string">'food'</span>,<span class="string">'mutton'</span>,ex=<span class="number">3</span>) <span class="comment"># key是food，value是mutton,将键值对存入redis缓存</span></span><br><span class="line">print(client.get(<span class="string">'food'</span>))</span><br></pre></td></tr></table></figure></p><p>2.<code>px</code>，过期时间(毫秒)，这里过期时间是3毫秒，3毫秒后键food的值就变成<code>None</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client = redis.Redis(connection_pool=pool)</span><br><span class="line">client.set(<span class="string">'food'</span>,<span class="string">'mutton'</span>,px=<span class="number">3</span>) <span class="comment"># key是food，value是mutton,将键值对存入redis缓存</span></span><br><span class="line">print(client.get(<span class="string">'food'</span>))</span><br></pre></td></tr></table></figure></p><p>3.<code>nx</code>,如果设置为<code>True</code>，则只有name不存在的时，当前<code>set</code>操作才执行(新建)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client = redis.Redis(connection_pool=pool)</span><br><span class="line">client.set(<span class="string">'food'</span>,<span class="string">'mutton'</span>,ex=<span class="number">2</span>) <span class="comment"># key是food，value是mutton,将键值对存入redis缓存</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 如果键food不存在，返回True；如果键food存在，返回None</span></span><br><span class="line">print(client.set(<span class="string">'food'</span>,<span class="string">'egg'</span>,nx=<span class="literal">True</span>)) <span class="comment"># True</span></span><br><span class="line">print(client.get(<span class="string">'food'</span>))  <span class="comment"># egg</span></span><br></pre></td></tr></table></figure></p><p>4.<code>xx</code>,如果设置为<code>True</code>, 则只有name存在时，当前<code>set</code>操作才执行(修改)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(client.set(<span class="string">'food'</span>,<span class="string">"egg"</span>,xx=<span class="literal">True</span>)) <span class="comment"># True,已经存在</span></span><br><span class="line"><span class="comment"># 当键food已经存在，返回True;当键food不存在，返回None</span></span><br></pre></td></tr></table></figure></p><h1 id="列表的创建，查询和修改"><a href="#列表的创建，查询和修改" class="headerlink" title="列表的创建，查询和修改"></a>列表的创建，查询和修改</h1><p><strong>插入数据</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client = redis.Redis(connection_pool=pool)</span><br><span class="line">client.lpush(<span class="string">'example_list_python'</span>,<span class="string">'python'</span>)</span><br><span class="line"><span class="comment"># 插入多条数据方法一:</span></span><br><span class="line">client.rpush(<span class="string">'example_list_python'</span>,<span class="string">'life is short'</span>,<span class="string">'first'</span>,<span class="string">'second'</span>)</span><br><span class="line"><span class="comment"># 插入多条数据方法二:</span></span><br><span class="line">datas = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'four'</span>]</span><br><span class="line">client.lpush(<span class="string">'example_list_python'</span>,*datas)</span><br></pre></td></tr></table></figure></p><p><strong>读取数据</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client = redis.Redis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.查看列表长度</span></span><br><span class="line">print(client.llen(<span class="string">'example_list_python'</span>))</span><br><span class="line"><span class="comment"># 2.获取列表中一定索引范围的数据</span></span><br><span class="line">print(client.lrange(<span class="string">'example_list_python'</span>,<span class="number">0</span>,<span class="number">-1</span>))</span><br><span class="line">print(client.lrange(<span class="string">'example_list_python'</span>,<span class="number">-4</span>,<span class="number">-1</span>))</span><br><span class="line"><span class="comment"># 3.从左右侧弹出数据</span></span><br><span class="line">word_l = client.lpop(<span class="string">'example_list_python'</span>)</span><br><span class="line">print(word_l,<span class="string">':'</span>,type(word_l))</span><br><span class="line">word_2 = client.rpop(<span class="string">'example_list_python'</span>)</span><br><span class="line">print(word_2,<span class="string">':'</span>,type(word_2))</span><br></pre></td></tr></table></figure></p><p><strong>修改数据</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client = redis.Redis(connection_pool=pool)</span><br><span class="line"><span class="comment"># 查看列表里面所有数据</span></span><br><span class="line">client.lrange(<span class="string">'example_list_python'</span>,<span class="number">0</span>,<span class="number">-1</span>)</span><br><span class="line"><span class="comment"># 修改指定位置数据</span></span><br><span class="line">client.lset(<span class="string">'example_list_python'</span>,<span class="number">4</span>,<span class="string">'talk_is_cheap'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="列表的应用"><a href="#列表的应用" class="headerlink" title="列表的应用"></a>列表的应用</h2><p><strong>简易分布式短信发送程序</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">client = redis.Redis(host=<span class="string">'xxx.xxx.xx.xx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    phone_info_bytes = client.lpop(<span class="string">'phone_queue'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> phone_info_bytes:</span><br><span class="line">        print(<span class="string">'短信发送完毕！'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    phone_info = json.loads(phone_info_bytes.decode())</span><br><span class="line">    retry_times = phone_info.get(<span class="string">'retry_times'</span>, <span class="number">0</span>)</span><br><span class="line">    phone_number = phone_info[<span class="string">'phone_number'</span>]</span><br><span class="line">    result = send_sms(phone_number)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        print(<span class="string">f'手机号：<span class="subst">&#123;phone_number&#125;</span> 短信发送成功！'</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> retry_times &gt;= <span class="number">3</span>:</span><br><span class="line">        print(<span class="string">f'重试超过3次，放弃手机号：<span class="subst">&#123;phone_number&#125;</span>'</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    next_phone_info = &#123;<span class="string">'phone_number'</span>: phone_number, <span class="string">'retry_times'</span>: retry_times + <span class="number">1</span>&#125;</span><br><span class="line">    client.rpush(<span class="string">'phone_queue'</span>, json.dumps(next_phone_info))</span><br></pre></td></tr></table></figure></p><h1 id="集合的创建，查找和修改"><a href="#集合的创建，查找和修改" class="headerlink" title="集合的创建，查找和修改"></a>集合的创建，查找和修改</h1><p><strong>插入数据</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client = redis.Redis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果数据已经存在时添加，返回0；在数据不存在时添加，返回1</span></span><br><span class="line">client.sadd(<span class="string">'example_set_python'</span>,<span class="string">'hello'</span>)</span><br><span class="line">client.sadd(<span class="string">'example_set_python'</span>,<span class="number">1</span>,<span class="number">2.0</span>,<span class="string">'three'</span>)</span><br><span class="line">datas = [<span class="number">9</span>,<span class="number">8.0</span>,<span class="string">'seven'</span>,<span class="string">'VI'</span>]</span><br><span class="line">client.sadd(<span class="string">'example_set_python'</span>,*datas)</span><br></pre></td></tr></table></figure></p><p><strong>读取数据</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client = redis.Redis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集合中元素得个数</span></span><br><span class="line">count = client.scard(<span class="string">'example_set_python'</span>)</span><br><span class="line">print(<span class="string">"当前元素个数:"</span>,count)</span><br><span class="line"><span class="comment"># 使用spop从集合中获取1条数据</span></span><br><span class="line">msg = client.spop(<span class="string">'example_set_python'</span>)</span><br><span class="line">print(msg)</span><br><span class="line">print(<span class="string">'集合剩余元素个数&#123;&#125;'</span>.format(client.scard(<span class="string">'example_set_python'</span>)))</span><br><span class="line">print(<span class="string">'--------------------'</span>)</span><br><span class="line"><span class="comment"># 在python中spop没有'count'参数，因此只能获取一条数据，如果要获取多条数据可以使用For循环来实现</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(client.spop(<span class="string">'example_set_python'</span>))</span><br><span class="line">print(<span class="string">'集合剩余元素个数&#123;&#125;'</span>.format(client.scard(<span class="string">'example_set_python'</span>)))</span><br><span class="line"><span class="comment"># 获取集合中全部数据</span></span><br><span class="line">all_data = client.smembers(<span class="string">'example_set_python'</span>)</span><br><span class="line">print(type(all_data)  <span class="comment"># &lt;class 'set'&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>删除数据</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client = redis.Redis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line">datas = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">'hello'</span>,<span class="string">'python'</span>]</span><br><span class="line">result = client.sadd(<span class="string">'example_set_python'</span>,*datas)</span><br><span class="line">print(client.smembers(<span class="string">'example_set_python'</span>))</span><br><span class="line"><span class="comment"># 删除指定数据</span></span><br><span class="line">result = client.srem(<span class="string">'example_set_python'</span>,<span class="string">"hello"</span>)</span><br><span class="line">print(<span class="string">'-------------删除后-----------------'</span>)</span><br><span class="line">print(client.smembers(<span class="string">'example_set_python'</span>))</span><br></pre></td></tr></table></figure></p><p><strong>集合的运算</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">client = redis.Redis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">set_datas_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">set_datas_2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">client.sadd(<span class="string">'set_python1'</span>,*set_datas_1)</span><br><span class="line">client.sadd(<span class="string">'set_python2'</span>,*set_datas_2)</span><br><span class="line">print(<span class="string">'集合的交集:'</span>,client.sinter(<span class="string">'set_python1'</span>,<span class="string">'set_python2'</span>))</span><br><span class="line">print(<span class="string">'集合的并集:'</span>,client.sunion(<span class="string">'set_python1'</span>,<span class="string">'set_python2'</span>))</span><br><span class="line">print(<span class="string">'set_python1对set_python2的差集:'</span>,client.sdiff(<span class="string">'set_python1'</span>,<span class="string">'set_python2'</span>))</span><br><span class="line">print(<span class="string">'set_python2对set_python1的差集:'</span>,client.sdiff(<span class="string">'set_python2'</span>,<span class="string">'set_python1'</span>))</span><br></pre></td></tr></table></figure></p><h1 id="哈希表的功能和应用"><a href="#哈希表的功能和应用" class="headerlink" title="哈希表的功能和应用"></a>哈希表的功能和应用</h1><p><strong>使用python向哈希表中添加数据</strong></p><blockquote><ul><li>hset: 一次只能添加一个键值对,格式: client.hset(‘key’，’字段名’,’值’)</li><li>hmset: 一次可以添加多个键值对,格式: client.hmset(‘key’,{‘字段名’:’值’,’字段名’:’值’})<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line"></span><br><span class="line">client.hset(<span class="string">"people_info"</span>,<span class="string">'张小二'</span>,json.dumps(&#123;<span class="string">"age"</span>:<span class="number">17</span>,<span class="string">"salary"</span>:<span class="number">100</span>,<span class="string">"address"</span>:<span class="string">"北京"</span>&#125;))</span><br><span class="line"></span><br><span class="line">other_people = &#123;</span><br><span class="line">    <span class="string">"王小三"</span>:json.dumps(&#123;<span class="string">"age"</span>:<span class="number">20</span>,<span class="string">"salary"</span>:<span class="number">9999</span>,<span class="string">"address"</span>:<span class="string">"四川"</span>&#125;),</span><br><span class="line">    <span class="string">"张小四"</span>:json.dumps(&#123;<span class="string">"age"</span>:<span class="number">30</span>,<span class="string">"salary"</span>:<span class="number">0</span>,<span class="string">"address"</span>:<span class="string">"山东"</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">client.hmset(<span class="string">'people_info'</span>,other_people)</span><br></pre></td></tr></table></figure></li></ul></blockquote><p><strong>使用python从哈希表中读取数据</strong></p><blockquote><ul><li>hkeys: 用户获取所有字段的字段名，返回的数据时包含bytes型数据的列表</li><li>格式： filed_names = client.hkeys(‘哈希表名’)</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line"></span><br><span class="line">field_names = client.hkeys(<span class="string">'people_info'</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> field_names:</span><br><span class="line">    print(name.decode())</span><br></pre></td></tr></table></figure><blockquote><ul><li>hget: 获取一个字段的值，格式: client.hget(‘哈希表名’,’字段名’)</li><li>hmget: 一次性获取多个字段的值，格式: client.hmget(‘哈希表名’,[‘字段名1’,’字段名2’,’字段名3’])</li><li>hgetall: 获取一个哈希表中的所有字段名的值，格式: client.hgetall(‘哈希表名’)</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line"><span class="comment"># 获取一条数据</span></span><br><span class="line">info = client.hget(<span class="string">'people_info'</span>,<span class="string">'张小二'</span>)</span><br><span class="line">print(info.decode())</span><br><span class="line"><span class="comment"># 获取多条数据</span></span><br><span class="line">info_list = hmget(<span class="string">'people_info'</span>,[<span class="string">'王小二'</span>,<span class="string">'刘小五'</span>])</span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> info_list:</span><br><span class="line">    print(info.decode())</span><br><span class="line"><span class="comment"># 获取所有字段名和值</span></span><br><span class="line">all_info = hgetall(<span class="string">'people_info'</span>)</span><br><span class="line">print(all_info)</span><br></pre></td></tr></table></figure><ul><li><code>hget</code>方法，无论时哈希表名不存在或者字段名不存在，都会返回<code>None</code></li><li><code>hmget</code>方法，如果哈希表名不存在，则返回的列表所有元素都是<code>None</code>;如果哈希表中部分字段存在，部分字段不存在，则返回值列表中不存在的字段值表示为<code>None</code></li><li><code>hgetall</code>方法返回的字典中，<code>key</code>,<code>value</code>都是<code>bytes</code>型的数据，因此查询里面的结果也要使用<code>bytes</code>型的数据</li></ul><p><strong>使用python判断哈希表中是否存在某个字段，并获取字段数量</strong></p><p>1.判断一个哈希表中是否有某个字段</p><ul><li>方法一: 获取这个字段的值，如果返回<code>None</code>，则这个字段就不存在</li><li>方法二: 使用<code>hexists</code>方法，如果字段存在返回<code>True</code>，否则返回<code>False</code>;如果<code>key</code>不存在，则直接返回<code>False</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> client.hexists(<span class="string">'people_info'</span>,<span class="string">'张三'</span>):</span><br><span class="line">    print(<span class="string">'存在张三这个字段'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不存在张三这个字段'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>2.查看一个哈希表中有多少个字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = client.hlen(<span class="string">'people_info'</span>)</span><br><span class="line">print(<span class="string">'people_info中一个有&#123;num&#125;个字段'</span>)</span><br></pre></td></tr></table></figure></p><ul><li>如果哈希表名存在，则返回字段数；如果不存在，则返回0</li></ul><p><strong>使用哈希表记录用户在线状态</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_online_status</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    当用户登录网站时调用这个函数。在Redis中，在名为user_online_status的哈希表中添加一个字段，字段名为用户账号，值为1</span></span><br><span class="line"><span class="string">    :param user_id: 用户账号</span></span><br><span class="line"><span class="string">    :reruan: None</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    client.hset(<span class="string">'user_online_status'</span>,user_id,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_offline_status</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    当用户登出这个网站时调用这个函数。从Redis中名为user_online_status的哈希表中删除一个字段，字段名为用户账号</span></span><br><span class="line"><span class="string">    :param user_id: 用户账号</span></span><br><span class="line"><span class="string">    :reruan: None</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    client.hdel(<span class="string">'user_online_status'</span>,user_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_online_status</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    检查用户是否在线。如果哈希表user_online_status中存在以用户账号为名的字段，则返回True，否则返回False</span></span><br><span class="line"><span class="string">    :param user_id: 用户账号</span></span><br><span class="line"><span class="string">    :reruan: bool</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> client.hexists(<span class="string">'user_oneline_status'</span>,user_id)</span><br></pre></td></tr></table></figure></p><h1 id="发布消息-订阅频道"><a href="#发布消息-订阅频道" class="headerlink" title="发布消息/订阅频道"></a>发布消息/订阅频道</h1><blockquote><p>Redis的“发布订阅”模式是一种消息通信模式，实现了一对多的消息实时发布功能</p></blockquote><p><strong>实现一对多的消息发布</strong><br>1.使用字符串实现一对多的消息发布功能</p><ul><li>定好一个字符串key,例如message</li><li>发送端使用字符串的set操作把新信息设置到这个key中</li><li>多个接收端不停的获取message的值，如果发现值变化了，则认为来了新的消息，接收并保存</li></ul><p>发送端代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    message = input(<span class="string">'请输入需要发布的消息:'</span>)</span><br><span class="line">    now_time = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    data = &#123;<span class="string">'message'</span>:message,<span class="string">'time'</span>:now_time&#125;</span><br><span class="line">    client.set(<span class="string">'message'</span>,json.dumps(data))</span><br></pre></td></tr></table></figure></p><p>接收端代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line">print(<span class="string">'开始接收消息'</span>)</span><br><span class="line">last_message_time = <span class="literal">None</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = client.get(<span class="string">'message'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    info = json.dumps(data.decode())</span><br><span class="line">    message = info[<span class="string">'message'</span>]</span><br><span class="line">    send_time = info[<span class="string">'time'</span>]</span><br><span class="line">    <span class="keyword">if</span> send_time == last_message_time:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(<span class="string">f'接到新消息:<span class="subst">&#123;message&#125;</span>,发送时间为:<span class="subst">&#123;send_time&#125;</span>'</span>)</span><br><span class="line">    last_message_time = send_time</span><br></pre></td></tr></table></figure></p><p>使用字符串的弊端:</p><ul><li>接收端不知道发送端什么时候发布消息，因此必须持续不断检查Redis,浪费系统资源</li><li>由于轮询查询,所以消息有延迟</li><li>如果发送端在1秒内连续更新10条，则后一条会覆盖前一条，而接收每秒才能获取一次数据，必然会导致最多漏掉9条数据。要减少遗漏数量就需要增加轮询效率，进一步增大系统开销。</li></ul><p><strong>使用Redis的发布/订阅模式实现消息通信</strong></p><blockquote><p>发布/订阅模式是Redis自带的一对多消息通信模式。使用订阅/发布模式不仅可以解决字符串通信遇到的各种问题，而且代码更加简洁</p></blockquote><p>发送端代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    message = input(<span class="string">'请输入要发布的消息:'</span>)</span><br><span class="line">    now_time = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    data = &#123;<span class="string">'message'</span>:message,<span class="string">'time'</span>:now_time&#125;</span><br><span class="line">    client.publish(<span class="string">'pubinfo'</span>,json.dumps(data))</span><br></pre></td></tr></table></figure></p><p>接收端代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line"><span class="comment"># 生成一个发布/订阅对象，并忽略订阅成功的消息</span></span><br><span class="line">listener = client.pubsub(ignore_subscrible_messages=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 订阅名为pubinfo的频道</span></span><br><span class="line">listener.subscribe(<span class="string">'pubinfo'</span>)</span><br><span class="line"><span class="keyword">for</span> message <span class="keyword">in</span> listener.listen():</span><br><span class="line">    data = json.loads(message[<span class="string">'data'</span>].decode())</span><br><span class="line">    print(<span class="string">f'接收到的信息:<span class="subst">&#123;data[<span class="string">"message"</span>]&#125;</span>,发送时间为:<span class="subst">&#123;data[<span class="string">"time"</span>]&#125;</span>'</span>)</span><br></pre></td></tr></table></figure></p><p><strong>在Python中发布消息/订阅频道</strong><br>1.发布消息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用python向一个频道发布消息: client.publish('频道名','消息')</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">client = redis.Redis()</span><br><span class="line">client.publish(<span class="string">'pubinfo'</span>,<span class="string">'message'</span>)</span><br></pre></td></tr></table></figure></p><p>2.订阅频道</p><blockquote><p>订阅频道设计的步骤稍微要多一些。首先需要生成一个发布/订阅对象，然后使用这个对象来订阅频道。订阅频道之后，循环从频道里面获取数据。</p></blockquote><ul><li>一个订阅实例只订阅一个频道<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">listener = client.pubsub()</span><br><span class="line">instener.subcribe(<span class="string">'频道名'</span>)</span><br><span class="line"><span class="comment"># instener.listen()是一个阻塞式的方法。程序运行到这里，如果频道里面没有数据，则程序会阻塞，知道频道里面有了新的信息，才会继续运行后面的代码</span></span><br><span class="line"><span class="keyword">for</span> message <span class="keyword">in</span> instener.listen():</span><br><span class="line">    <span class="comment"># 第一次进入for循环，数据为&#123;'type':'subscribe','pattern':None,'channel':b'pubinfo','data':1&#125;</span></span><br><span class="line">    <span class="comment"># 这条消息表明订阅'pubinfo'成功,如果不想显示这一条内容，则在初始化发布订阅对象时，指定ignore_subscribe_messages=True</span></span><br><span class="line">    print(<span class="string">'每一条消息'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>3.在一个发布订阅实例中订阅多个频道<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line">listener = client.pubsub(ignore_subscribe_messages=<span class="literal">True</span>)</span><br><span class="line">listener.subscribe(<span class="string">'computer'</span>,<span class="string">'math'</span>,<span class="string">'shopping'</span>)</span><br><span class="line"><span class="keyword">for</span> message <span class="keyword">in</span> listener.listen():</span><br><span class="line">    channel = message[<span class="string">'channel'</span>].decode()</span><br><span class="line">    data = message[<span class="string">'data'</span>].decode()</span><br><span class="line">    print(<span class="string">f'频道:<span class="subst">&#123;channel&#125;</span>发送了一条消息:<span class="subst">&#123;data&#125;</span>'</span>)</span><br></pre></td></tr></table></figure></p><p>注意事项:</p><ul><li>‘发布/订阅’模式的工作工程就像收音机的广播一样，只有订阅到这个频道，才能收到消息，而之前的消息都丢失了。如:发送端先发送10条信息，在启动接收端，而接收端是没有办法收到先发送的10条信息的</li><li>可以有非常多的接收端同时订阅一个频道。一旦这个频道有消息发布，所有接收端都会收到信息。</li></ul><h1 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h1><blockquote><p>有序集合(<code>sorted set</code>)是Redis的一个数据结构。<br>有序集合里面的数据跟集合一样，也是不能重复的，但是每一个元素又关联了一个分数，根据这个分数可以对元素进行排序，分数可以重复。</p></blockquote><p><strong>实现排行榜功能</strong></p><blockquote><p>分别用MongoDB和Redis的有序集合来实现排行榜功能。对比传统数据库的排序功能，寻找有序集合实现排序功能的优点</p></blockquote><p>1.使用传统数据库实现排行榜<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">handler = pymongo.MongoClient().chapter_9.rank_data</span><br><span class="line">result = handler.find(&#123;&#125;).sort(<span class="string">'score'</span>,<span class="number">-1</span>)</span><br></pre></td></tr></table></figure></p><p>使用数据库排序的弊端：</p><ul><li>排行榜会实时更新，数据每一次变化都需要排序，会对数据库性能造成影响</li><li>频繁更新数据，导致数据库性能下降</li><li>数据量太大时，排序时间缓慢</li><li>对被排序字段添加索引会占更多空间</li></ul><p>2.使用有序集合进行排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接把mongodb中的数据导入redis中名为rank的有序集合</span></span><br><span class="line">handler = pymongo.MongoClient(<span class="string">'mongodb://root:iamsuperuser@localhost'</span>).chapter_9.rank_data</span><br><span class="line">client = redis.Redis()</span><br><span class="line"></span><br><span class="line">rows = handler.find(&#123;&#125;,&#123;<span class="string">'_id'</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    client.zadd(<span class="string">'rank'</span>,row[<span class="string">'user_id'</span>],row[<span class="string">'score'</span>])</span><br><span class="line"><span class="comment"># 显示某个特定用户的排名</span></span><br><span class="line">position = client.zrevrank(<span class="string">'rank'</span>,<span class="number">10017</span>)</span><br><span class="line">print(<span class="string">f'用户:10017排名为<span class="subst">&#123;position + <span class="number">1</span>&#125;</span>'</span>)</span><br><span class="line"><span class="comment"># 显示全部用户的排名</span></span><br><span class="line">rank = client.zervrank(<span class="string">'rank'</span>,<span class="number">0</span>,<span class="number">10000</span>,withscores=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><p><strong>使用Python读写有序集合</strong><br>1.向有序集合添加数据</p><ul><li>方法一: <code>client.zadd(&#39;有序集合名&#39;,&#39;值1&#39;,&#39;评分1&#39;,&#39;值2&#39;,&#39;评分2&#39;)</code></li><li>方法二: <code>client.zadd(&#39;有序集合&#39;,值1=评分1,值2=评分2)</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name1 = <span class="string">'王小二'</span></span><br><span class="line">name2 = <span class="string">'张三'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 值与评分都可以用变量，也可以直接写</span></span><br><span class="line">client.zadd(<span class="string">'age_rank'</span>,name1,<span class="number">18</span>,name2,<span class="number">26</span>,<span class="string">'小明'</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 只能写值，不能用变量，但评分可以使用变量</span></span><br><span class="line">client.zadd(<span class="string">'age_rank'</span>,王小二=<span class="number">18</span>,张三=<span class="number">26</span>,小明=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul><p>2.修改评分</p><blockquote><p>修改评分使用的方法是<code>zincrby</code>,格式: <code>client.zincrby(&#39;有序集合名&#39;,值,该变量)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client.zincrby(<span class="string">'age_rank'</span>,<span class="string">'王小二'</span>,<span class="number">3</span>)</span><br><span class="line">client.zincrby(<span class="string">'age_rank'</span>,<span class="string">'小明'</span>,<span class="number">-0.5</span>)</span><br></pre></td></tr></table></figure></p></blockquote><p>3.对有序集合元素基于评分范围进行排序</p><blockquote><p>根据评分范围进行排序，使用的方法分别是<code>zrangebyscore</code>和<code>zrevrangebyscore</code>,这两个方法用法完全相同，差别在于:</p><ul><li>zrangebyscore根据评分从小到大的顺序排序</li><li>zrevrangebyscore根据评分从大到小的顺序排序</li></ul></blockquote><p>格式：</p><ul><li><code>client.zrangebyscore(&#39;有序集合名&#39;,评分上限，评分下限，结果切片起始位置，结果数量，withscores=False)</code></li><li><code>client.arevrangebyscore(&#39;有序集合名&#39;,评分上限，评分下限，结果切片起始位置，结果数量，withscores=False)</code></li></ul><blockquote><p>如果<code>withscores</code>为<code>False</code>返回的结果是直接排序好的值；如果<code>withscores</code>为<code>True</code>，则返回的列表里面的元素是元组，元组第一个元素是值，第二个元素是评分</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对积分在10-100范围内的人员进行倒序排序，并返回前3条数据</span></span><br><span class="line">client.zrevrangebyscore(<span class="string">'rank'</span>,<span class="number">100</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>4.对有序集合基于位置进行排序</p><blockquote><p>基于位置范围进行排序，用到的方法名为:<code>zrange</code>和<code>zrevrange</code></p><ul><li>zrange对评分按照从小到大的顺序排序</li><li>zrevrange对评分按照从大到小的顺序排序</li></ul></blockquote><p>格式:</p><ul><li>client.zrange(‘有序集合名’,开始位置(含),结束位置(含),desc=False,withsocres=False)</li><li><p>client.zrevrange(‘有序集合名’,开始位置(含),结束位置(含),withscores=False)</p></li><li><p><code>zrange()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果使用的是zrange方法，则位置0是评分最小的元素，</span></span><br><span class="line"><span class="comment"># 当然开始位置和结束位置也可以是负数，表示从后往前数，例如开始位置-4,结束位置-1</span></span><br><span class="line">result = client.zrange(<span class="string">'rank'</span>,<span class="number">0</span>,<span class="number">4</span>,withscores=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> index,one <span class="keyword">in</span> enumerate(result):</span><br><span class="line">    print(<span class="string">f'用户id:<span class="subst">&#123;one[<span class="number">0</span>].decode()&#125;</span>,积分:<span class="subst">&#123;one[<span class="number">1</span>]&#125;</span>,排行榜第<span class="subst">&#123;index + <span class="number">1</span>&#125;</span>'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>zrevrange()</code>方法</p><blockquote><p>使用zrevrange方法，位置0是最大的元素,如果开始位置写0，结束位置写4，最取最大的5个元素<br>如果开始位置取-4，结束位置取-1，则取最小的4个元素，且Score高的在前</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rank_100_1000 = client.zrevrange(<span class="string">'rank'</span>,<span class="number">0</span>,<span class="number">4</span>,withscores=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> index,one <span class="keyword">in</span> enumerate(rank_100_1000):</span><br><span class="line">    print(<span class="string">f'用户id:<span class="subst">&#123;one[<span class="number">0</span>].decode()&#125;</span>,积分:<span class="subst">&#123;one[<span class="number">1</span>]&#125;</span>,排行榜第<span class="subst">&#123;index + <span class="number">1</span>&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>5.根据值查询排名，根据值查询评分</p><ul><li>使用<code>zrank</code>和<code>zrevrank</code>方法，可以查询一个值在有序列表中的排名<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client.zrank('有序列表名','值'),如果值存在，则返回值的排名，最小值为0；如果值不存在则返回None</span></span><br><span class="line">client.zrank(<span class="string">'rank'</span>,<span class="string">'张三'</span>)</span><br><span class="line"><span class="comment"># client.zrevrank('有序列表名','值'),如果值存在，则返回值的排名，最大值为0；如果值不存在则返回None</span></span><br><span class="line">client.zrevrank(<span class="string">'rank'</span>,<span class="string">'张三'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>6.其它常用方法</p><ul><li><code>zcard</code>: 查询有序集合里面一共有多少个值，如果有序集合不存在返回0,格式:<code>zcard(&#39;有序集合名&#39;)</code></li><li><code>zcount</code>: 查询在某个评分范围内有多少个值，格式:<code>zcount(&#39;有序集合名&#39;,评分上限，评分下限)</code></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://www.jianshu.com/p/2639549bedc8" rel="external nofollow noopener noreferrer" target="_blank">使用Python来操作redis用法详解</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装和使用&quot;&gt;&lt;a href=&quot;#安装和使用&quot; class=&quot;headerlink&quot; title=&quot;安装和使用&quot;&gt;&lt;/a&gt;安装和使用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;安装redis&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight shell
      
    
    </summary>
    
      <category term="Database" scheme="http://saltci.xyz/categories/Database/"/>
    
      <category term="Redis" scheme="http://saltci.xyz/categories/Database/Redis/"/>
    
    
      <category term="redis" scheme="http://saltci.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis快速上手</title>
    <link href="http://saltci.xyz/Database/Redis/Redis%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://saltci.xyz/Database/Redis/Redis快速上手/</id>
    <published>2020-02-07T04:36:00.000Z</published>
    <updated>2020-11-27T07:02:13.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis快速入门"><a href="#Redis快速入门" class="headerlink" title="Redis快速入门"></a>Redis快速入门</h1><h2 id="Redis安装和使用"><a href="#Redis安装和使用" class="headerlink" title="Redis安装和使用"></a>Redis安装和使用</h2><p><strong>安装和启动</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ubuntu安装redis-server</span><br><span class="line">sudo apt-get install redis-server</span><br><span class="line"><span class="meta">#</span> 服务端启动</span><br><span class="line">sudo /etc/init.d/redis-server start [,status,stop,restart]</span><br></pre></td></tr></table></figure></p><p><strong>客户端连接</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h &lt;ip地址&gt; -p &lt;端口&gt;</span><br><span class="line"><span class="meta">#</span> 默认连接本机的6379端口</span><br><span class="line">redis-cli</span><br><span class="line">127.0.0.1:6379&gt;ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure></p><p><strong>设置连接密码</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改配置文件中 requirepass &lt;password&gt;</span><br><span class="line">requirepass &lt;yourpassword&gt;</span><br><span class="line"><span class="meta">#</span> linux 重启服务</span><br><span class="line">sudo /etc/init.d/redis-server restart</span><br><span class="line"><span class="meta">#</span> window 重启服务</span><br><span class="line">redis-server.exe redis.windows.conf</span><br><span class="line"><span class="meta">#</span> 测试连接</span><br><span class="line">redis -h 127.0.0.1 -p 6379 -a 123456</span><br></pre></td></tr></table></figure></p><p><strong>设置远程连接</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改bind 127.0.0.1,注释掉bind即允许所有ip访问</span><br><span class="line">bind 14.68.225.22 127.0.0.1</span><br><span class="line"><span class="meta">#</span> 修改保护模式</span><br><span class="line">protected-mode no</span><br><span class="line"><span class="meta">#</span> 重启redis服务</span><br><span class="line">sudo /etc/init.d/redis-server restart</span><br><span class="line"><span class="meta">#</span> 测试连接</span><br><span class="line">redis -h 14.68.225.22 -p 6379 -a 123456</span><br></pre></td></tr></table></figure></p><p><strong>禁用危险命令</strong></p><blockquote><p>Redis中默认开启了一些非常高权限的一些命令，使用这些命令，轻则清空Redis，重则写入挖矿木马甚至是SSH key公钥，从而控制服务器<br>通过修改Redis配置文件，可以对一些危险命令进行改名或者禁用，从而降低安全风险</p></blockquote><p>1.打开Redis配置文件，添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rename-command CONFIG &quot;&quot;</span><br><span class="line">rename-command FLUSHDB sdfaksdfjkasd</span><br><span class="line">rename-command FLUSHALL SDFKSDD</span><br><span class="line">rename-command PEXPIRE OKASETTW</span><br><span class="line">rename-command SHUTDOWN &quot;&quot;</span><br><span class="line">rename-command BGREWRITEAOF SEWERWEFSDF</span><br><span class="line">rename-command BGSAVE ASDFPEWE</span><br><span class="line">rename-command SAVE ASDFKLEWE</span><br><span class="line">rename-command DEBUG &quot;&quot;</span><br></pre></td></tr></table></figure></p><p>2.如果把命令重命名为空字符串，表示禁用这个命令。</p><p><strong>通用命令，适用于所有数据类型</strong></p><ul><li><code>select &lt;number&gt;</code>: 切换库(number的值0-15之间的数字)</li><li><code>keys *</code>: 查看所有键,如<code>keys user*</code>(查看user开头的键)</li><li><code>TYPE key</code>: 键类型</li><li><code>exists key</code>: 键是否存在</li><li><code>del key</code>: 删除键</li><li><code>rename key newkey</code>: 重命名键</li><li><code>flushdb</code>: 清除当前库中所有数据(慎用)</li><li><code>flushall</code>: 清除所有库中所有数据(慎用)</li></ul><h2 id="字符串的创建，查询和修改"><a href="#字符串的创建，查询和修改" class="headerlink" title="字符串的创建，查询和修改"></a>字符串的创建，查询和修改</h2><p>字符串(<code>Strings</code>)是<code>Redis</code>的基本数据结构之一，它由<code>key</code>和<code>value</code>两部分组成。   </p><p><strong>创建字符串</strong><br>语法:<code>set key value</code></p><ul><li>key可以是数字，大小写字母，下划线或者中文</li><li>value可以是任意内容<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set give_me_a_word OK</span><br></pre></td></tr></table></figure></li></ul><p><strong>查询字符串</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure></p><p><strong>读取字符串</strong><br>如果获取一个不存在的key，则会返回<code>(nil)</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get give_me_a_word</span><br></pre></td></tr></table></figure></p><p><strong>修改key里面的值</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 如果Redis不存在这个key则创建，存在这个key使用新的值覆盖旧值</span><br><span class="line">set user_data New</span><br><span class="line"><span class="meta">#</span> 使用nx参数，当key不存在时创建，当key存在时放弃操作</span><br><span class="line">set user_data abc NX</span><br><span class="line"><span class="meta">#</span> 给字符串的末尾加上其他字符串</span><br><span class="line">append user_data abc</span><br><span class="line"><span class="meta">#</span> 如果值的内容有空格，需要用引号包起来</span><br><span class="line">set user_data "word1 word2 word3"</span><br></pre></td></tr></table></figure></p><p><strong>数值操作</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.整数操作</span><br><span class="line"><span class="meta">#</span> 让key里的数字加1</span><br><span class="line">incr focus</span><br><span class="line"><span class="meta">#</span> 让key里的数字减1</span><br><span class="line">decr focus</span><br><span class="line"><span class="meta">#</span> 让key的数字增加100</span><br><span class="line">incrby focus 100</span><br><span class="line"><span class="meta">#</span> 让key里的数字减少100</span><br><span class="line">decrby focus 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.浮点数操作</span><br><span class="line">incrbyfloat key step</span><br></pre></td></tr></table></figure></p><p><strong>string命令汇总</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.字符串操作</span><br><span class="line">set key value</span><br><span class="line">set key value nx</span><br><span class="line">get key</span><br><span class="line"><span class="meta">#</span> 同时设置多个key-value</span><br><span class="line">mset key1 value1 key2 value2 key3 value3</span><br><span class="line"><span class="meta">#</span> 同时获取多个key-value</span><br><span class="line">mget key1 key2 key3</span><br><span class="line"><span class="meta">#</span> 设置过期时间,过了日期就自动销毁,ex秒 px毫秒</span><br><span class="line">set key value ex seconds</span><br><span class="line"><span class="meta">#</span> 查询key的过期时间还剩多少秒</span><br><span class="line">ttl key # 没有设置过期时间返回-1;key已经过期返回-2</span><br><span class="line"><span class="meta">#</span> 获取长度</span><br><span class="line">strlen key</span><br><span class="line"><span class="meta">#</span> 2.数字操作</span><br><span class="line">incr</span><br><span class="line">decr</span><br><span class="line">incrby</span><br><span class="line">decrby</span><br><span class="line">incrbyfloat key number</span><br><span class="line"><span class="meta">#</span> 3.设置过期时间的两种方式</span><br><span class="line"><span class="meta">#</span> 方式一</span><br><span class="line">set key value ex 3</span><br><span class="line"><span class="meta">#</span> 方式二</span><br><span class="line">set key value</span><br><span class="line">expire key 5 # 秒</span><br><span class="line">pexpire key 5 # 毫秒</span><br><span class="line"><span class="meta">#</span> 4.查看存活时间</span><br><span class="line">ttl key</span><br><span class="line"><span class="meta">#</span> 5.删除过期</span><br><span class="line">persist key</span><br><span class="line"><span class="meta">#</span> 返回旧值并设置新值(如果键不存在，就创建并赋值)</span><br><span class="line">getset key value</span><br></pre></td></tr></table></figure></p><h2 id="列表的创建，查询和修改"><a href="#列表的创建，查询和修改" class="headerlink" title="列表的创建，查询和修改"></a>列表的创建，查询和修改</h2><p>列表（<code>List</code>）是<code>Redis</code>中的另一种数据结构。</p><p><strong>插入数据</strong><br>列表分左右两个方向，所以可以从左右两侧插入。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.从列表左侧插入数据</span><br><span class="line">lpush example_list hello</span><br><span class="line"><span class="meta">#</span> 如果有多个value，使用空格隔开</span><br><span class="line">lpush example_list how are you</span><br><span class="line"><span class="meta">#</span> 如果value本身有空格，使用引号包起来</span><br><span class="line">lpush example_list "are you ok" fine thank you</span><br><span class="line"><span class="meta">#</span> 2.从列表右侧插入数据</span><br><span class="line">rpush example_list_right 你好</span><br><span class="line">rpush example_list_right 请问贵姓 免贵姓王</span><br><span class="line">rpush example_list_right "幸会 幸会" "久仰 久仰"</span><br></pre></td></tr></table></figure></p><p><strong>查看数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.查看列表的长度</span><br><span class="line">llen key</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.根据索引查看数据,0代表最左边的数据，-1代表最右边的数据</span><br><span class="line"><span class="meta">#</span> 查看索引为6的数据</span><br><span class="line">lrange example_list 6 6</span><br><span class="line"><span class="meta">#</span> 查看索引从2(包括2)到5（包括5）的数据</span><br><span class="line">lrange example_list 2 5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3.查看列表所有数据</span><br><span class="line"><span class="meta">#</span> 不要贸然列出列表里面的所有数据，如果一个列表内有上百万条数据，贸然列出所有数据可能会导致大量数据输出瞬间耗尽系统IO资源</span><br><span class="line">lrange key 0 -1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4.弹出数据,在弹出数据同时，被弹出的这个数据会从列表中删除</span><br><span class="line"><span class="meta">#</span> 从左边弹出数据</span><br><span class="line">lpop key</span><br><span class="line"><span class="meta">#</span> 从右边弹出数据</span><br><span class="line">rpop key</span><br></pre></td></tr></table></figure></p><p><strong>修改数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lset key index 新的值</span><br></pre></td></tr></table></figure></p><p><strong>删除多余的信息</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式: ltrim key &lt;起始位置&gt; &lt;截至位置&gt;</span><br><span class="line"><span class="meta">#</span> 使用ltrim命令删除多余的信息，只保留列表最右侧的20条信息</span><br><span class="line">ltrim chat_list -1 -20</span><br></pre></td></tr></table></figure></p><h2 id="集合的创建，查询和修改"><a href="#集合的创建，查询和修改" class="headerlink" title="集合的创建，查询和修改"></a>集合的创建，查询和修改</h2><p><code>Redis</code>的集合与列表一样可以存放很多数据，但不同之处在于:集合里面的数据不能重复，也没有顺序</p><p><strong>插入数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> sadd key value1 value2 value3</span><br><span class="line">sadd example_set hello</span><br><span class="line">sadd example_set 1 2.0 three</span><br><span class="line">sadd example_set "thank you" "you are welcome"</span><br></pre></td></tr></table></figure></p><p><strong>读取数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.查询集合里面元素的数量:scard key</span><br><span class="line">scard example_set</span><br><span class="line"><span class="meta">#</span> 2.从集合中获取数据,spop命令会随机获取集合中的数据:spop key count</span><br><span class="line"><span class="meta">#</span> 获取一条数据后，这一条数据就会从集合中删除</span><br><span class="line">spop example_set</span><br><span class="line">spop example_set 3</span><br><span class="line">spop example_set 1000</span><br><span class="line"><span class="meta">#</span> 3.获取集合中所有数据：smembers key,该命令不会删除数据，但如果集合中数据量极大，慎用</span><br><span class="line">smembers example_set</span><br><span class="line"><span class="meta">#</span> 4.判断集合中是否包含某个元素</span><br><span class="line"><span class="meta">#</span> sadd命令在遇到数据已存在时会返回0，数据不存在则把数据插入之后返回1</span><br><span class="line"><span class="meta">#</span> 单纯检查数据是否在集合中，可以使用sismember: sismember key value</span><br><span class="line"><span class="meta">#</span> 如果数据存在返回1，反之则返回0</span><br><span class="line">sismember example_set 2</span><br></pre></td></tr></table></figure></p><p><strong>删除数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用srem命令，从集合中删除指定数据:srem key value1 value2 value3</span><br><span class="line">srem example_set "thank you"</span><br></pre></td></tr></table></figure></p><p><strong>集合的交集</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在redis中，求集合交集使用的命令为sinter:sinter key1 key2 key3</span><br><span class="line">sadd set_1 1, 2 python three C 三</span><br><span class="line">sadd set_2 9 8.0 七 VI python 2</span><br><span class="line">sinter set_1 set_2 # 2 python</span><br></pre></td></tr></table></figure></p><p><strong>集合的并集</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在redis中，求集合并集使用的命令是sunion: sunion key1 key2 key3</span><br><span class="line">sadd set_4 9 8.0 七 VII python 2</span><br><span class="line">sadd set_3 1, 2 python three C 三</span><br><span class="line">sunion set_3 set_4</span><br></pre></td></tr></table></figure></p><p><strong>集合的差集</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在redis中，求集合的差集使用的命令是sdiff: sdiff key1 key2 key3</span><br><span class="line">sadd set_6 9 8.0 七 VII python 2</span><br><span class="line">sadd set_5 1, 2 python three C 三</span><br><span class="line">sdiff set_5 set_6</span><br></pre></td></tr></table></figure></p><h2 id="哈希表的功能和应用"><a href="#哈希表的功能和应用" class="headerlink" title="哈希表的功能和应用"></a>哈希表的功能和应用</h2><p><strong>向哈希表中添加内容</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hset people_info 赵老六 '&#123;"age":10,"salary":1000,"address":"北京"&#125;'</span><br><span class="line">hmset book_info 论语 32 中庸 48 大学 50</span><br></pre></td></tr></table></figure></p><p><strong>向哈希表中读取数据</strong></p><blockquote><p>从哈希表中读取数据，分别对应的命令是: hkeys, hget, hmget, hgetall,它们的格式如下:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hkeys 哈希表名</span><br><span class="line">hget 哈希表名 字段名</span><br><span class="line">hmget 哈希表名 字段名1 字段名2 字段名3</span><br><span class="line">hgetall 哈希表名</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>判断字段是否存在和获取字段数量</strong></p><blockquote><p>判断字段是否存在使用命令hexists, 获取字段数量使用关键字heln,它们的格式如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexists 哈希表名 字段名</span><br><span class="line">hlen 哈希表名</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>执行hexists时，如果字段存在，则返回1；如果字段不存在，则返回0.</li></ul><h2 id="发布消息-订阅频道"><a href="#发布消息-订阅频道" class="headerlink" title="发布消息/订阅频道"></a>发布消息/订阅频道</h2><p><strong>发布消息</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish computer 人工智能新突破</span><br></pre></td></tr></table></figure></p><p><strong>订阅频道</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> subscribe 频道名1 频道名2</span><br><span class="line">subscribe computer math</span><br></pre></td></tr></table></figure></p><ul><li>订阅之后，一旦被订阅的频道有新的消息发布，订阅端就会收到消息</li><li>每条消息都会对应redis-cli中的3条返回消息: 第一条是信息类，第二条是频道名，第三条是被发布的内容</li></ul><h2 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h2><blockquote><p>有序集合(<code>sorted set</code>)是Redis的一个数据结构。<br>有序集合里面的数据跟集合一样，也是不能重复的，但是每一个元素又关联了一个分数，根据这个分数可以对元素进行排序，分数可以重复。</p></blockquote><p><strong>添加数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd 有序集合名 评分1 值1 评分2 值2 评分n 值n</span><br></pre></td></tr></table></figure></p><p><strong>修改评分</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zincrby 有序集合名 修改的分数 值</span><br></pre></td></tr></table></figure></p><p><strong>基于评分范围排序，基于位置范围排序</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 基于评分范围排序</span><br><span class="line"><span class="meta">#</span> WITHSCORES可以省略，省略之后，只有值没有分</span><br><span class="line"><span class="meta">#</span> 如果不需要对结果进行切片，则LIMIT 切片开始位置 结果数量也可以省略</span><br><span class="line">zrangebyscore 有序列表 评分下限 评分上限 WITHSCORES LIMIT 切片开始位置 结果数量</span><br><span class="line">zrevrangebyscore 有序列表 评分下限 评分上限 WITHSCORES LIMIT 切片开始位置 结果数量</span><br></pre></td></tr></table></figure></p><p><strong>查询值得排名，查询值得评分</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询值得排名</span><br><span class="line">zrank 有序集合名 值</span><br><span class="line">zrevrank 有序集合名 值</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查询值得评分</span><br><span class="line">zscore 有序集合名 值</span><br></pre></td></tr></table></figure></p><p><strong>其它常用命令</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询有序集合中元素得个数</span><br><span class="line">zcard 有序集合名</span><br><span class="line"><span class="meta">#</span> 查询评分范围内得元素个数</span><br><span class="line">zcount 有序集合名 积分下限 积分上限</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis快速入门&quot;&gt;&lt;a href=&quot;#Redis快速入门&quot; class=&quot;headerlink&quot; title=&quot;Redis快速入门&quot;&gt;&lt;/a&gt;Redis快速入门&lt;/h1&gt;&lt;h2 id=&quot;Redis安装和使用&quot;&gt;&lt;a href=&quot;#Redis安装和使用&quot; cla
      
    
    </summary>
    
      <category term="Database" scheme="http://saltci.xyz/categories/Database/"/>
    
      <category term="Redis" scheme="http://saltci.xyz/categories/Database/Redis/"/>
    
    
      <category term="redis" scheme="http://saltci.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Python内置函数</title>
    <link href="http://saltci.xyz/Python/Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>http://saltci.xyz/Python/Python内置函数/</id>
    <published>2020-02-06T13:11:42.000Z</published>
    <updated>2020-11-27T07:02:13.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="isinstance函数"><a href="#isinstance函数" class="headerlink" title="isinstance函数"></a>isinstance函数</h1><p><strong>描述</strong><br><code>isinstance()</code>函数来判断一个对象是否是已知的类型，类似于type()</p><p><strong>语法</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isinstance(object,classinfo)</span><br><span class="line"><span class="comment"># object: 实例对象</span></span><br><span class="line"><span class="comment"># classinfo: 可以是直接或间接类名，基本类型或者由他们组成的元组</span></span><br><span class="line"><span class="comment"># 返回值: 如果对象的类型与参数二的类型相同在则返回True，否则返回False</span></span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line">isinstance(a,int) <span class="comment"># True</span></span><br><span class="line">isinstance(a,str) <span class="comment"># Flase</span></span><br><span class="line">isinstance(a,(str,int,list))  <span class="comment"># 是元组中的其中一个返回True</span></span><br></pre></td></tr></table></figure></p><p><strong>isinstance()与type()的区别</strong></p><ul><li>type()不会认为子类是一种父类类型，不考虑继承关系</li><li>isinstance()会认为子类是一种父类类型，考虑继承关系</li><li>如果判断两个类型是否相同推荐使用isinstance()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">isinstance(A(),A)  <span class="comment"># True</span></span><br><span class="line">type(A()) == A     <span class="comment"># True</span></span><br><span class="line">isinstance(B(),A)  <span class="comment"># True</span></span><br><span class="line">type(B()) == A     <span class="comment"># Flase</span></span><br></pre></td></tr></table></figure><h1 id="issubclass-函数"><a href="#issubclass-函数" class="headerlink" title="issubclass()函数"></a>issubclass()函数</h1><p><strong>描述</strong><br><code>issubclass()</code>方法用于判断参数class是否是类型参数calssinfo的子类。</p><p><strong>语法</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">issubclass(class,classinfo)</span><br><span class="line"><span class="comment"># class:类</span></span><br><span class="line"><span class="comment"># classinfo:类</span></span><br><span class="line"><span class="comment"># 返回值: 如果class是classinfo的子类返回True,否则返回False</span></span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(issubclass(B,A))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure></p><h1 id="getattr-函数"><a href="#getattr-函数" class="headerlink" title="getattr()函数"></a>getattr()函数</h1><p><strong>描述</strong><br><code>getattr()</code>函数用于返回一个对象属性值。</p><p><strong>语法</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getattr(object,name[, default])</span><br><span class="line"><span class="comment"># object: 对象</span></span><br><span class="line"><span class="comment"># name: 字符串，对象属性</span></span><br><span class="line"><span class="comment"># default: 默认返回值，如果不提供该参数，在没有对应属性时，将触发AttributeError</span></span><br><span class="line"><span class="comment"># 返回值: 返回对象属性值</span></span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    bar = <span class="number">1</span></span><br><span class="line">a = A()</span><br><span class="line">getattr(a,<span class="string">'bar'</span>)    <span class="comment"># 获取属性bar的值</span></span><br><span class="line">getattr(a,<span class="string">'bar2'</span>)   <span class="comment"># 属性bar2不存在，触发AttributeError异常</span></span><br><span class="line">getarrr(a,<span class="string">'bar2'</span>,<span class="number">3</span>) <span class="comment"># 属性bar2不存在，但设置了默认值，返回默认值3</span></span><br></pre></td></tr></table></figure></p><h1 id="enumerare-函数"><a href="#enumerare-函数" class="headerlink" title="enumerare()函数"></a>enumerare()函数</h1><p><strong>描述</strong><br><code>enumerate()</code>函数用于将一个可便利的数据对象组合成一个索引序列，同时列出数据和数据下标，一般用在for循环中</p><p><strong>语法</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enumerate(sequence,[start=<span class="number">0</span>])</span><br><span class="line"><span class="comment"># sequence: 一个序列，迭代器或其他支持迭代对象</span></span><br><span class="line"><span class="comment"># start: 下表起始位置</span></span><br><span class="line"><span class="comment"># 返回值: 返回enumerate对象</span></span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test_list = [<span class="string">'This'</span>,<span class="string">'is'</span>,<span class="string">'a'</span>,<span class="string">'test'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index,item <span class="keyword">in</span> enumerate(test_list)</span><br><span class="line">    print(index,item)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">1</span> This</span><br><span class="line"><span class="number">2</span> <span class="keyword">is</span></span><br><span class="line"><span class="number">3</span> a</span><br><span class="line"><span class="number">4</span> test</span><br></pre></td></tr></table></figure></p><ul><li>利用enumerate()统计文件行数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">row_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index, line <span class="keyword">in</span> enumerate(open(<span class="string">'generate_data.py'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)):</span><br><span class="line">    row_count += <span class="number">1</span></span><br><span class="line">print(row_count)</span><br></pre></td></tr></table></figure></li></ul><h1 id="all-函数"><a href="#all-函数" class="headerlink" title="all()函数"></a>all()函数</h1><p><strong>描述</strong><br><code>all()</code>函数用于判断给定的可迭代参数iterable中的元素是否都为<code>True</code>，如果是返回<code>True</code>，否则返回<code>False</code>。元素除了是<code>0</code>，<code>空</code>，<code>None</code>外都算<code>True</code>,函数等价于<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><p><strong>语法</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">all(iterable)</span><br><span class="line"><span class="comment"># iterable: 元组或列表</span></span><br><span class="line"><span class="comment"># 返回值: 如果iterable里面所有元素不为0，'',False或者iterable为空，all(iterable)返回True,否则返回False</span></span><br><span class="line"><span class="comment"># 注意: 空元组，空列表返回True</span></span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">all([<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>])  <span class="comment"># True</span></span><br><span class="line">all([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">''</span>, <span class="string">'d'</span>]) <span class="comment"># False</span></span><br><span class="line">all([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment"># False</span></span><br><span class="line">all([]) <span class="comment"># True</span></span><br><span class="line">all(()) <span class="comment"># True</span></span><br></pre></td></tr></table></figure></p><h1 id="any-函数"><a href="#any-函数" class="headerlink" title="any()函数"></a>any()函数</h1><p><strong>描述</strong><br><code>any()</code>函数用于判断给定的可迭代参数<code>iterable</code>是否全为<code>False</code>，如果有一个为<code>True</code>，则返回<code>True</code>。元素除了是<code>0</code>,<code>空</code>，<code>False</code>外都算<code>True</code>,函数等价于:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">any</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><p><strong>语法</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">any(iterable)</span><br><span class="line"><span class="comment"># iterable: 元组或列表</span></span><br><span class="line"><span class="comment"># 返回值: 如果都为空，0,False则返回False,否则返回True</span></span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">any([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])  <span class="comment"># True</span></span><br><span class="line">any([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">''</span>, <span class="string">'d'</span>])  <span class="comment"># True</span></span><br><span class="line">any([<span class="number">0</span>, <span class="string">''</span>, <span class="literal">False</span>])  <span class="comment"># False</span></span><br><span class="line">any([])  <span class="comment"># False</span></span><br><span class="line">any(())  <span class="comment"># False</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;isinstance函数&quot;&gt;&lt;a href=&quot;#isinstance函数&quot; class=&quot;headerlink&quot; title=&quot;isinstance函数&quot;&gt;&lt;/a&gt;isinstance函数&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;br&gt;&lt;code&gt;i
      
    
    </summary>
    
      <category term="Python" scheme="http://saltci.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="http://saltci.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB常用命令</title>
    <link href="http://saltci.xyz/Database/MongoDB/MongDB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://saltci.xyz/Database/MongoDB/MongDB常用命令/</id>
    <published>2020-02-04T04:36:00.000Z</published>
    <updated>2020-11-27T07:02:13.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB基础操作"><a href="#MongoDB基础操作" class="headerlink" title="MongoDB基础操作"></a>MongoDB基础操作</h1><p><strong>常用命令</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.切换/创建数据库</span><br><span class="line">use &lt;your db&gt;</span><br><span class="line"><span class="meta">#</span> 2.查询所有数据库</span><br><span class="line">show dbs</span><br><span class="line"><span class="meta">#</span> 3.删除当前使用数据库</span><br><span class="line">db.dropDatabase()</span><br><span class="line"><span class="meta">#</span> 4.查看当前使用的的数据库</span><br><span class="line">db.getName();</span><br><span class="line"><span class="meta">#</span> 5.查看当前db状态</span><br><span class="line">db.stats()</span><br><span class="line"><span class="meta">#</span> 6.查看当前db版本</span><br><span class="line">db.version()</span><br><span class="line"><span class="meta">#</span> 7.查看当前db的链接的机器地址</span><br><span class="line">db.getMongo()</span><br></pre></td></tr></table></figure></p><p><strong>插入数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.插入单条数据</span><br><span class="line">db.getCollection('test').insertOne(&#123;"name":"张三","age":17&#125;)</span><br><span class="line"><span class="meta">#</span> 2.批量插入数据</span><br><span class="line">db.getCollection('test').insertMany([</span><br><span class="line">    &#123;"name":"张三","age":17&#125;,</span><br><span class="line">    &#123;"name":"李四","age":18&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><p>注: 每一条数据被插入MongoDB后都会被自动添加”_id”字段，<code>_id</code>读作<code>ObjectId</code>,它是由时间，机器码，进程PID和自增计数器构成。</p><p><strong>查询数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.查询所有数据</span><br><span class="line">db.getCollection('test').find()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.查询特定数据(如果有多个字段，多个字段需要同时满足)</span><br><span class="line">db.getCollection('test').find(&#123;"字段1":"值1","字段2":"值2"&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3.查询范围值数据</span><br><span class="line">db.getCollection('test').find(&#123;"age":&#123;"$lte":25,"$gte":50&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4.限定返回哪些字段</span><br><span class="line"><span class="meta">#</span> 格式:db.getCollection('test').find('用于过滤记录的字典','用于限定字段的字典')</span><br><span class="line">db.getCollection('test').find(&#123;&#125;,&#123;'address':0,"age":0&#125;) </span><br><span class="line"><span class="meta">#</span> 如果值为0：全部字段中剔除值为0的字段并返回</span><br><span class="line"><span class="meta">#</span> 如果值为1：只返回值为1的这些字段</span><br><span class="line"><span class="meta">#</span> '_id'比较特殊，除非限定字段的字典把"_id"值设为0，否则默认返回</span><br><span class="line"><span class="meta">#</span> 如果不考虑'_id'则限定字段的字典里面的值非0即1，不能混用</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 5.查询满足要求的数据有多少条</span><br><span class="line">db.getCollection('test').find(&#123;"age":&#123;"$gt":25&#125;&#125;).count()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 6.限定返回结果</span><br><span class="line">db.getCollection('test').find().limit(4)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 7.对查询结果进行排序</span><br><span class="line"><span class="meta">#</span> 字段的值为-1表示倒序，为1表示正序</span><br><span class="line">db.getCollection('test').find(&#123;"age":&#123;"$gt":21&#125;&#125;).sort(&#123;"age":-1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 8.对数据进行偏移，比如偏移2，就忽略前两个元素，得到第三个及以后的元素</span><br><span class="line">db.getCollection('test').find().sort(&#123;"age":-1&#125;).skip(2)</span><br></pre></td></tr></table></figure></p><p>常用操作符:</p><ul><li><code>$gt</code> :大于</li><li><code>$gte</code> :大于等于</li><li><code>$lt</code> :小于</li><li><code>$lte</code> :小于等于</li><li><code>$ne</code> :不等于</li><li><code>$in</code> : 匹配数组中的任一值</li><li><code>$nin</code>：不匹配数组中的任一值</li><li><code>$regex</code>: 匹配正则表达式</li><li><code>$exists</code>: 属性是否存在</li><li><code>$type</code>: 类型判断</li><li><code>$mod</code>: 数字模操作</li><li><code>$test</code>: 文本查询</li><li><code>$where</code>: 高级条件查询</li></ul><p><strong>修改数据</strong><br>语法: <code>db.getCollection(&#39;test&#39;).updateMany({&quot;字段&quot;:&quot;值&quot;},{&quot;$set&quot;:{&quot;字段1&quot;:&quot;新的值1&quot;,&quot;字段2&quot;:&quot;新的值2&quot;}})</code></p><ul><li>第一个参数同find的第一个参数，用来寻找所有需要被更新的记录</li><li>第二个参数是一个字典，key为<code>$set</code>,它的值是另外一个字典，这个字典里指定要被修改的字段名的新的值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('test').updateMany(</span><br><span class="line">    &#123;"name":"张三"&#125;,</span><br><span class="line">    &#123;"$set":&#123;"address":"苏州"&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>删除数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 为了防止误删除，一般做法是先查询要删除的数据，然后再将查询的数据删除</span><br><span class="line">db.getCollection('test').find(&#123;"name":"张三"&#125;)</span><br><span class="line"><span class="meta">#</span> 将find修改为deleteMany</span><br><span class="line">db.getCollection('test').deleteMany(&#123;"name":"张三"&#125;)</span><br></pre></td></tr></table></figure></p><p>注：一般实际工作中会使用”加删除”，即增加一个<code>deleted</code>字段,如果值为0表示没有删除，如果值为1表示已经被删除</p><h1 id="MongoDB高级操作"><a href="#MongoDB高级操作" class="headerlink" title="MongoDB高级操作"></a>MongoDB高级操作</h1><h2 id="使用正则表达式查询"><a href="#使用正则表达式查询" class="headerlink" title="使用正则表达式查询"></a>使用正则表达式查询</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('test').find(&#123;"name":&#123;"$regex":"^r"&#125;&#125;)</span><br></pre></td></tr></table></figure><h2 id="AND和OR操作"><a href="#AND和OR操作" class="headerlink" title="AND和OR操作"></a>AND和OR操作</h2><p><strong>隐式AND操作</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询所有age大于20并且sex为"男"的数据</span><br><span class="line">db.getCollection('test').find(&#123;"age":&#123;"$gt":20&#125;,"sex":"男"&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>显示AND操作</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 显示AND操作语法: collection.find(&#123;"$and":[字典1,字典2,字典3,...,字典n]&#125;)</span><br><span class="line"><span class="meta">#</span> 查询所有年龄大于20并且sex为"男"的数据</span><br><span class="line">db.getCollection('test').find(&#123;</span><br><span class="line">    "$and":[&#123;"age":&#123;"$gt":20&#125;&#125;,&#123;"sex":"男"&#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>显示AND和隐式AND操作混合</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>  查询所有年龄大于20，性别为男，并且ID小于10的数据</span><br><span class="line">db.getCollection('test').find(&#123;</span><br><span class="line">    "id":&#123;"$lt":10&#125;,</span><br><span class="line">    "$and":[&#123;"age":&#123;"$gt":20&#125;&#125;,&#123;"sex":"男"&#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>OR操作</strong><br><code>OR</code>操作会自动按顺序去检查每一个条件，遵循短路原则：只要前面的条件满足了，那后面的条件就直接跳过。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 语法: db.getcollection('test').find(&#123;"$or":[字典1,字典2,字典3,...,字典n]&#125;)</span><br><span class="line">db.getCollection('test').find(&#123;</span><br><span class="line">    "$or":[</span><br><span class="line">        &#123;"age":&#123;"$gt":28&#125;&#125;,</span><br><span class="line">        &#123;"salary":&#123;"$gt":9900&#125;&#125;</span><br><span class="line">]&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>不能写成隐式的AND操作</strong><br>所有的隐式操作都可以改写成显示AND操作，但反之则不行。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('test').find(&#123;</span><br><span class="line">    "$and":[</span><br><span class="line">        &#123;"$or":[</span><br><span class="line">            &#123;"age":&#123;"$gt":28&#125;&#125;,</span><br><span class="line">            &#123;"salary":&#123;"$gt":9900&#125;&#125;</span><br><span class="line">        ]&#125;,</span><br><span class="line">        &#123;"$or":[</span><br><span class="line">            &#123;"sex":"男"&#125;,</span><br><span class="line">            &#123;"id":&#123;"$lt":20&#125;&#125;</span><br><span class="line">        ]&#125;</span><br><span class="line">]&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="查询子文档或数组中的数据"><a href="#查询子文档或数组中的数据" class="headerlink" title="查询子文档或数组中的数据"></a>查询子文档或数组中的数据</h2><p><strong>认识嵌入式文档</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "content":"五星好评!",</span><br><span class="line">    "create_time":"2020-01-01",</span><br><span class="line">    "user":&#123;"name"："张三","user_id":100,"following":1,"followed":100&#125;,</span><br><span class="line">    "comments":100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>上面这个数据中，<code>user</code>称为嵌入式文档，<code>user</code>下面的字段被称为嵌套字段。</li><li>查询嵌套字段需要使用点号指定具体字段名:<code>嵌入式文档名.嵌套字段名</code></li></ul><p><strong>使用点号定位嵌套字段</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询user中的子字段user_id为102的数据</span><br><span class="line">db.getCollection('test').find(&#123;"user.user_id":102&#125;)</span><br><span class="line"><span class="meta">#</span> 查询所有followed大于10的数据</span><br><span class="line">db.getCollection('test').find(&#123;"user.followed":&#123;"$gt":10&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>返回嵌套字段中特定内容</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('test').find(</span><br><span class="line">    &#123;"user.followed":&#123;"$gt":10&#125;&#125;,</span><br><span class="line">    &#123;"_id":0,"user.name":1,"user.user_id":1&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>认识数组字段</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "name":"衬衣",</span><br><span class="line">    "size":["S","M","L","XL"],</span><br><span class="line">    "price":[100,200,300,800]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>查询数组包含不包含数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.查询所有"size"包含"M"的数据</span><br><span class="line">db.getCollection('test').find("size":"M")</span><br><span class="line"><span class="meta">#</span> 2.查询数组不包含数据</span><br><span class="line">db.getCollection('test').find("size":&#123;"$ne":"M"&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>查询数组中至少有一个元素在某个范围内</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('test').find(&#123;"price":&#123;"$lt":300,"$gte":200&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>根据数组长度查询数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询所有price字段长度为2的记录</span><br><span class="line">db.getCollection('test').find(&#123;"price":&#123;"$size":2&#125;&#125;)</span><br></pre></td></tr></table></figure></p><ul><li><code>$size</code>只能查询具体某一个长度的数组，不能查询长度大于或小于某个值的数组</li></ul><p><strong>根据数组索引查询数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询所有size中的第一个数据为S的记录</span><br><span class="line">db.getCollection('test').find(&#123;"size.0":"S"&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>根据数组索引比较数据的大小</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询price第一个数据大于500的所有记录</span><br><span class="line">db.getCollection('test').find(&#123;"price.0":&#123;"$gt":500&#125;&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><p><strong>聚合的基本语法</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection.aggregate([阶段1,阶段2,阶段3,...,阶段N])</span><br></pre></td></tr></table></figure></p><p>聚合操作可以有0个，1个或多个阶段</p><ul><li>如果为0，则它的作用的find一样</li><li>如果聚合有至少一个阶段，那么每个阶段都是一个字典。不同阶段负责不同的事情，每个阶段都有一个关键字。有专门负责筛选数据的<code>$match</code>，有专门负责字段相关阶段的<code>$project</code>等。</li></ul><p><strong>筛选数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询所有age大于28或者sex为男的记录</span><br><span class="line">db.getCollection('test').aggregate([</span><br><span class="line">    &#123;"$match":&#123;"$or":[&#123;"age":&#123;"$gt":28&#125;&#125;,&#123;"sex":"男"&#125;]&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><p><strong>抽取嵌套字段</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('test').aggregate([</span><br><span class="line">    &#123;"$project":&#123;"name":"$user.name","user_id":"$user.user_id"&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><p><strong>处理字段特殊值</strong></p><ul><li>添加一个字段，字段的值是数字1</li><li>添加一个字段，字段的值是一个普通字符串，但是以<code>$</code>开头<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('test').aggregate([</span><br><span class="line">    &#123;"$match":&#123;"age":&#123;"$gt":28&#125;&#125;&#125;,</span><br><span class="line">    &#123;"$project":&#123;"_id":0,"hello":&#123;"$literal":"$normalstring"&#125;,"abcd":&#123;"$literal":1&#125;&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li></ul><h2 id="分组操作"><a href="#分组操作" class="headerlink" title="分组操作"></a>分组操作</h2><p>分组操作对应的关键词是<code>$group</code>,它的作用是根据给出的字段key，把所有key的值相同的记录放在一起运算，这些运算包含:求和(<code>$sum</code>),计算平均数(<code>$avg</code>),最大值(<code>$max</code>),最小值(<code>$min</code>)等。</p><p><strong>分组操作阶段去重</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 分组操作去重语法：collection.aggregate([&#123;"$group":&#123;"_id":"$被去重的字段名"&#125;&#125;])</span><br><span class="line"><span class="meta">#</span> 1.使用分组操作对name字段进行去重</span><br><span class="line">db.getCollection('test').aggregate([</span><br><span class="line">    &#123;"$group":&#123;"_id":"$name"&#125;&#125;</span><br><span class="line">])</span><br><span class="line"><span class="meta">#</span> 2.使用distinct函数去重</span><br><span class="line">db.getCollection('test').distinct('name')</span><br></pre></td></tr></table></figure></p><p>distinct函数和分组操作去重的区别:</p><ul><li>distinct函数在mongodb去重之后会返回一个数组，在Python中去重之后会返回一个列表</li><li>分组操作去重之后会返回记录</li></ul><p><strong>分组操作并计算统计值</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('test').aggregate([</span><br><span class="line">    &#123;"$group":</span><br><span class="line">        &#123;</span><br><span class="line">            "_id":"$name",</span><br><span class="line">            "max_score":&#123;"$max":"$score"&#125;,</span><br><span class="line">            "min_score":&#123;"$min":"$score"&#125;,</span><br><span class="line">            "sum_score":&#123;"$sum":"$score"&#125;,</span><br><span class="line">            "averge_score":&#123;"$avg":"$score"&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><ul><li><code>$sum</code>的值可以为1，这样查询语句就变成统计每个分组内有多少条记录</li><li><code>$sum</code>和<code>$avg</code>的值对应的字段的值应该是数字，强行使用非数字字段，<code>$sum</code>返回0,<code>$avg</code>返回null</li><li>字符串可以比较大小，所以<code>$max</code>和<code>$min</code>可以正常应用到字符串型字段</li></ul><p><strong>去重并选择最新/最老数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('test').aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        "$group":&#123;</span><br><span class="line">            "_id":"$name",</span><br><span class="line">            "date":&#123;"$last":"$date"&#125;,</span><br><span class="line">            "score":&#123;"$last":"$score"&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><ul><li><code>$last</code>表示取最后一条数据</li><li>将<code>$last</code>替换为<code>$first</code>即取第一条数据</li><li>在mongodb中，老数据先插入，新数据后插入，所以每一组最后一条数据就是最新插入的数据</li></ul><p><strong>拆分数组</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('test').aggregate([</span><br><span class="line">    &#123;"$unwind":"$size"&#125;,</span><br><span class="line">    &#123;"$unwind":"$price"&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><h2 id="联集合查询"><a href="#联集合查询" class="headerlink" title="联集合查询"></a>联集合查询</h2><p>相当于SQL中的联表查询。在某些情况下，一些相关的数据需要保存到多个集合中，然后使用某一个字段进行关联</p><p><strong>数据集</strong><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 用户集合(weiboi_user)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>:<span class="number">1001</span>,</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"张三"</span>,</span><br><span class="line">    <span class="attr">"register_date"</span>:<span class="string">"2018-06-09"</span>,</span><br><span class="line">    <span class="attr">"age"</span>:<span class="number">17</span>,</span><br><span class="line">    <span class="attr">"work"</span>:<span class="string">"学生"</span></span><br><span class="line">&#125;</span><br><span class="line"># 微博集合(weibo_post)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"user_id"</span>:<span class="number">1001</span>,</span><br><span class="line">    <span class="attr">"content"</span>:<span class="string">"你好世界"</span>,</span><br><span class="line">    <span class="attr">"post_time"</span>:<span class="string">"2018-06-11 12:23:12"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>联集合查询语法</strong></p><ul><li><p>相等匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">主集合.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        "$lookup":&#123;</span><br><span class="line">            "from":"被查集合名",</span><br><span class="line">            "localField":"主集合字段",</span><br><span class="line">            "foreignField":"被查集合字段",</span><br><span class="line">            "as":"保存查询结果的字段名"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li><li><p>条件和不相关子查询:在两个集合之间执行不相关的子查询以及允许除单个相等match之外的其他连接条件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "$lookup":&#123;</span><br><span class="line">        "from":"被查集合名",</span><br><span class="line">        "let":&#123;&lt;var1&gt;:&lt;expression&gt;&#125;,</span><br><span class="line">        "pipeline":[</span><br><span class="line">            &lt;pipeline to excute on the collection to join&gt;</span><br><span class="line">        ],</span><br><span class="line">        "as":"output array field"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>let</code>: 指定要在<code>pipeline</code>阶段中使用的变量</p></li><li><code>pipeline</code>: 指定要在已连接结合上运行的管道。</li></ul><p><strong>联集合查询</strong><br>1.同时知道微博内容和发微博用户的名字与职业。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('weibo_post').aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        "$lookup":&#123;</span><br><span class="line">            "from":"weibo_user",</span><br><span class="line">            "localField":"user_id",</span><br><span class="line">            "foreignField":"id",</span><br><span class="line">            "as":"user_info"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;"$unwind":"$user_info"&#125;,</span><br><span class="line">    &#123;"$project":&#123;</span><br><span class="line">        "content":1,</span><br><span class="line">        "post_time":1,</span><br><span class="line">        "name":"$user_info.name",</span><br><span class="line">        "work":"$user_info.work"</span><br><span class="line">    &#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><p>2.查询名为张三用户发送的微博<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('weibo_user').aggregate([</span><br><span class="line">    &#123;"$match":&#123;"name":"张三"&#125;&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        "$lookup":&#123;</span><br><span class="line">            "from":"weibo_post",</span><br><span class="line">            "localField":"id",</span><br><span class="line">            "foreignField":"user_id",</span><br><span class="line">            "as":"weibo_info"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;"$unwind":"$weibo_info"&#125;,</span><br><span class="line">    &#123;"$project":&#123;</span><br><span class="line">        "name":1,</span><br><span class="line">        "work":1,</span><br><span class="line">        "content":"$weibo_info.content",</span><br><span class="line">        "post_time":"$weibo_info.post_time"</span><br><span class="line">    &#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MongoDB基础操作&quot;&gt;&lt;a href=&quot;#MongoDB基础操作&quot; class=&quot;headerlink&quot; title=&quot;MongoDB基础操作&quot;&gt;&lt;/a&gt;MongoDB基础操作&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;常用命令&lt;/strong&gt;&lt;br&gt;&lt;figure c
      
    
    </summary>
    
      <category term="Database" scheme="http://saltci.xyz/categories/Database/"/>
    
      <category term="MongoDB" scheme="http://saltci.xyz/categories/Database/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://saltci.xyz/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Python操作MongoDB</title>
    <link href="http://saltci.xyz/Database/MongoDB/Python%E6%93%8D%E4%BD%9CMongoDB/"/>
    <id>http://saltci.xyz/Database/MongoDB/Python操作MongoDB/</id>
    <published>2020-02-04T04:36:00.000Z</published>
    <updated>2020-11-27T07:02:13.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用pymongo操作MongoDB数据库"><a href="#使用pymongo操作MongoDB数据库" class="headerlink" title="使用pymongo操作MongoDB数据库"></a>使用pymongo操作MongoDB数据库</h1><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p><strong>安装pymongo</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo</span><br></pre></td></tr></table></figure></p><p><strong>连接数据库</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.如果mongodb运行在本地，且没有修改端口或者添加用户名和密码，则初始化MongoClient实例不需要带参数</span></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line"><span class="comment"># 2.如果mongodb运行在远程服务器上，则需要使用URL来指定链接地址</span></span><br><span class="line"><span class="comment"># 格式：mongodb://&lt;username&gt;:&lt;password&gt;@&lt;ip地址或域名&gt;:&lt;端口&gt;/数据库名</span></span><br><span class="line">client = MongoClient(<span class="string">"mongodb://username:123456@45.76.110.210:27019"</span>)</span><br><span class="line"><span class="comment"># 3.如果没有设置权限认证则不需要用户名和密码</span></span><br><span class="line">client = MongoClient(<span class="string">"mongodb://45.76.110.210:27109"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>连接库与集合</strong></p><ul><li><p>方法一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line">database = client.test_db</span><br><span class="line">collection = database.test_collection</span><br></pre></td></tr></table></figure></li><li><p>方法二:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line">db_name = <span class="string">"test_db"</span></span><br><span class="line">collection_name = <span class="string">"test_collection"</span></span><br><span class="line">database = client[db_name]</span><br><span class="line">clllection = database[collection_name]</span><br></pre></td></tr></table></figure></li></ul><h2 id="pymongo基本操作"><a href="#pymongo基本操作" class="headerlink" title="pymongo基本操作"></a>pymongo基本操作</h2><p><strong>mongo命令与pymongo方法对照表</strong></p><table><thead><tr><th>MongoDB命令</th><th>PyMongo命令</th></tr></thead><tbody><tr><td>insertOne</td><td>insert_one</td></tr><tr><td>insertMany</td><td>insert_many</td></tr><tr><td>find</td><td>find</td></tr><tr><td>updateOne</td><td>update_one</td></tr><tr><td>updateMany</td><td>update_many</td></tr><tr><td>deleteOne</td><td>delete_one</td></tr><tr><td>deleteMany</td><td>delete_many</td></tr></tbody></table><p><strong>插入数据</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line">database = client[<span class="string">"test_db"</span>]</span><br><span class="line">collection = database[<span class="string">"test_collection"</span>]</span><br><span class="line"><span class="comment"># 批量插入数据</span></span><br><span class="line">collection.insert_many([</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="number">15</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 插入单条数据</span></span><br><span class="line">collection.insert_one(&#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="number">15</span>&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>查询数据</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line">database = client[<span class="string">"test_db"</span>]</span><br><span class="line">collection = database[<span class="string">"test_collection"</span>]</span><br><span class="line"></span><br><span class="line">rows = collection.find(&#123;</span><br><span class="line">    <span class="string">"age"</span>:&#123;<span class="string">"$lt"</span>:<span class="number">25</span>,<span class="string">"$gt"</span>:<span class="number">21</span>&#125;,</span><br><span class="line">    <span class="string">"name"</span>:&#123;<span class="string">"$ne"</span>:<span class="string">"张三"</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure></p><p><strong>更新数据</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from pymongo import MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line">database = client["test_db"]</span><br><span class="line">collection = database["test_collection"]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 更新多条数据</span><br><span class="line">collection.update_many(</span><br><span class="line">    &#123;"name":"张三"&#125;,</span><br><span class="line">    &#123;"$set":&#123;"address":"美国","age":80&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><ul><li>使用<code>$set</code>只更新字典内存在的字段，如果不用<code>$set</code>则会把之前的数据全部用字典替换掉，原本存在的其它字段会删除</li><li>更新操作支持<code>upsert</code>参数，如果该参数存在则更新，不存在则创建</li><li>如果使用了<code>upsert</code>参数，则<code>$set</code>的值应该包含每个字段，否则被插入的内容只有被更新的这几个字段</li></ul><p><strong>删除数据</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection.delete_many(&#123;<span class="string">"age"</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>python实现mongoDB的regex查询</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接mongodb</span></span><br><span class="line">handler = pymongo.MongoClient().test_db.test_collection</span><br><span class="line"></span><br><span class="line">query_bds = &#123;<span class="string">"name"</span>:&#123;<span class="string">"$regex"</span>:<span class="string">"^R"</span>&#125;&#125;</span><br><span class="line">rows = handler.find(query_bds)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure></p><p><strong>Python实现MongoDB的AND和OR操作</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接mongodb</span></span><br><span class="line">handler = pymongo.MongoClient().test_db.test_collection</span><br><span class="line"></span><br><span class="line">rows = handler.find(&#123;</span><br><span class="line">    <span class="string">"$and"</span>:[</span><br><span class="line">        &#123;<span class="string">"$or"</span>:[</span><br><span class="line">            &#123;<span class="string">"age"</span>:&#123;<span class="string">"$gt"</span>:<span class="number">28</span>&#125;&#125;,</span><br><span class="line">            &#123;<span class="string">"salary"</span>:&#123;<span class="string">"$gt"</span>:<span class="number">9900</span>&#125;&#125;</span><br><span class="line">        ]&#125;,</span><br><span class="line">        &#123;<span class="string">"$or"</span>:[</span><br><span class="line">            &#123;<span class="string">"sex"</span>:<span class="string">"男"</span>&#125;,</span><br><span class="line">            &#123;<span class="string">"id"</span>:&#123;<span class="string">"$lt"</span>:<span class="number">20</span>&#125;&#125;</span><br><span class="line">        ]&#125;</span><br><span class="line">]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure></p><p><strong>Python操作嵌入式文档和数组字段</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 连接mongodb</span><br><span class="line">handler = pymongo.MongoClient().test_db.test_collection</span><br><span class="line"></span><br><span class="line">rows1 = handler.find(&#123;"size.0":"M"&#125;)</span><br><span class="line">rows2 = handler.find(&#123;"price":&#123;"$lt":300,"$gte":200&#125;&#125;)</span><br><span class="line">rows3 = handler.find(&#123;"price":&#123;"$size":2&#125;&#125;)</span><br><span class="line">rows4 = handler.find(&#123;"price.0":&#123;"$gt":500&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>使用python执行聚合操作</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 连接mongodb</span><br><span class="line">handler = pymongo.MongoClient().test_db.test_collection</span><br><span class="line"></span><br><span class="line">pipe = [</span><br><span class="line">    &#123;"$match":&#123;"name":"张三"&#125;&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        "$lookup":&#123;</span><br><span class="line">            "from":"weibo_post",</span><br><span class="line">            "localField":"id",</span><br><span class="line">            "foreignField":"user_id",</span><br><span class="line">            "as":"weibo_info"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;"$unwind":"$weibo_info"&#125;,</span><br><span class="line">    &#123;"$project":&#123;</span><br><span class="line">        "name":1,</span><br><span class="line">        "work":1,</span><br><span class="line">        "content":"$weibo_info.content",</span><br><span class="line">        "post_time":"$weibo_info.post_time"</span><br><span class="line">&#125;&#125;]</span><br><span class="line">rows = handler.aggregate(pipe)</span><br><span class="line"></span><br><span class="line">for row in rows:</span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure></p><h1 id="MongoDB与Python不通用的操作"><a href="#MongoDB与Python不通用的操作" class="headerlink" title="MongoDB与Python不通用的操作"></a>MongoDB与Python不通用的操作</h1><p><strong>空值</strong></p><ul><li><code>MongoDB</code>中空值写作<code>null</code>,<code>Python</code>中空值写作<code>None</code></li></ul><p><strong>布尔值</strong></p><ul><li><code>MongoDB</code>中真为<code>true</code>,假为<code>false</code>,首字母小写；</li><li><code>Python</code>中真为<code>True</code>，假为<code>False</code>，首字母大写</li></ul><p><strong>排序参数</strong></p><ul><li><code>MongoDB</code>中<code>sort()</code>命令接收一个字典，key是排序的字段名，值为1或-1</li><li><code>Python</code>中<code>sort()</code>方法接收两个参数，第一个参数为字段名，第二个参数为-1或者1</li></ul><p><strong>查询ID</strong></p><ul><li><p><code>MongoDB</code>中可以根据<code>_id</code>的值来查询文档,查询语句如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection('test').find(&#123;"_id":ObjectID("5e37e51fe222645d0e3272f3")&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>Python</code>中需要从<code>bson</code>库中导入<code>ObjectID</code>,代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">from</span> bson <span class="keyword">import</span> ObjectID</span><br><span class="line"></span><br><span class="line">client = MongoClient()</span><br><span class="line">database = client[<span class="string">"test_db"</span>]</span><br><span class="line">collection = database[<span class="string">"test_collection"</span>]</span><br><span class="line"></span><br><span class="line">rows = collection.find(&#123;<span class="string">"_id"</span>:ObjectID(<span class="string">"5e37e51fe222645d0e3272f3"</span>)&#125;,</span><br><span class="line">                        ,&#123;<span class="string">"_id"</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="MongoDB优化和安全建议"><a href="#MongoDB优化和安全建议" class="headerlink" title="MongoDB优化和安全建议"></a>MongoDB优化和安全建议</h1><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li>使用Pymongodb操作数据时，凡是涉及写的操作(比如<code>insert</code>,<code>update</code>)，需要进行异常处理。</li></ul><h2 id="提高MongoDB读写性能"><a href="#提高MongoDB读写性能" class="headerlink" title="提高MongoDB读写性能"></a>提高MongoDB读写性能</h2><p><strong>批量插入与逐条插入数据，比较性能差异</strong></p><p>1.生成初始数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">first_word_in_name = <span class="string">'赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨朱秦尤许何吕施张孔曹严华金魏陶姜戚谢邹喻柏水窦章云苏潘葛奚范彭郎'</span></span><br><span class="line">second_word_in_name = <span class="string">'天地玄黄宇宙洪荒日月盈昃辰宿列张寒来暑往秋收冬藏闰余成岁律吕调阳云腾致雨露结为霜金生丽水玉出昆冈剑号巨阙'</span></span><br><span class="line">third_word_in_name = <span class="string">'对酒当歌人生几何譬如朝露去日苦多慨当以慷忧思难忘何以解忧唯有杜康青青子衿悠悠我心但为君故沉吟至今'</span></span><br><span class="line"></span><br><span class="line">print(len(first_word_in_name),len(second_word_in_name),len(third_word_in_name))</span><br><span class="line"></span><br><span class="line">work_number = <span class="number">1</span></span><br><span class="line">people_list = []</span><br><span class="line"><span class="keyword">for</span> first <span class="keyword">in</span> first_word_in_name:</span><br><span class="line">    <span class="keyword">for</span> second <span class="keyword">in</span> second_word_in_name:</span><br><span class="line">        <span class="keyword">for</span> third <span class="keyword">in</span> third_word_in_name:</span><br><span class="line">            name = first + second + third</span><br><span class="line">            age = random.randint(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">            salary = random.randint(<span class="number">10000</span>, <span class="number">20000</span>)</span><br><span class="line">            phone_number = <span class="string">'1'</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                phone_number += str(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">            people_list.append(&#123;<span class="string">'work_number'</span>: work_number,</span><br><span class="line">                                <span class="string">'name'</span>: name,</span><br><span class="line">                                <span class="string">'age'</span>: str(age),</span><br><span class="line">                                <span class="string">'salary'</span>: str(salary),</span><br><span class="line">                                <span class="string">'phone'</span>: phone_number&#125;)</span><br><span class="line">            work_number += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'people_info.csv'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8-sig'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.DictWriter(f, fieldnames=[<span class="string">'work_number'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'salary'</span>, <span class="string">'phone'</span>])</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerows(people_list)</span><br></pre></td></tr></table></figure></p><p>2.逐行插入数据的时间<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'people_info.csv'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.DictReader(f)</span><br><span class="line">    people_info_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> reader]</span><br><span class="line"></span><br><span class="line">handler = pymongo.MongoClient().chapter_8.one_by_one</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> people_info_list:</span><br><span class="line">    handler.insert_one(info)</span><br><span class="line">end_time = time.time()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'逐条插入数据，耗时：'</span>, end_time - start_time)</span><br></pre></td></tr></table></figure></p><ul><li>逐条插入数据，耗时： 28.835277795791626</li></ul><p>3.批量插入数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'people_info.csv'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.DictReader(f)</span><br><span class="line">    people_info_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> reader]</span><br><span class="line"></span><br><span class="line">handler = pymongo.MongoClient().chapter_8.batch</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">handler.insert_many(people_info_list)</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(<span class="string">'批量插入数据，耗时：'</span>, end_time - start_time)</span><br></pre></td></tr></table></figure></p><ul><li>批量插入数据，耗时： 2.1189966201782227</li></ul><p>4.如何正确的批量插入数据</p><blockquote><p>仅仅是本地的MongoDB数据库，批量插入数据的性能远远超过逐条插入数据性能。如果使用的是远程数据库，那么网络IO导致的时间消耗估计更大。</p></blockquote><p>从Redis里面读数据，再插入到MongoDB中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line">handler = pymongo.MongoClient().chatper_8.people_info</span><br><span class="line"></span><br><span class="line">people_info_list = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    people_info_json = client.lpop(<span class="string">'people_info'</span>)</span><br><span class="line">    <span class="keyword">if</span> people_info_json:</span><br><span class="line">        people_info = json.loads(people_info_json.decode())</span><br><span class="line">        people_info_list.append(people_info)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">handler.insert_many(people_info_list)</span><br></pre></td></tr></table></figure></p><ul><li>如果<code>Redis</code>中的数据量非常大，全部转换成字典以后超过系统内存了，怎么办？</li><li>如果<code>Redis</code>中的数据临时暂停添加，过一会再添加，会怎么样？</li><li>假设<code>Redis</code>中有100 000 000条数据，读取到99 999 999条数据断电了，会怎么样？</li></ul><p>5.批量一次性插入数据</p><blockquote><p>如果已经明确知道<code>redis</code>中的数据就是全部数据，虽然多，但是不会继续增加新的数据，那么代码可以修改为如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line">handler = pymongo.MongoClient().chatper_8.people_info</span><br><span class="line"></span><br><span class="line">people_info_list = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    people_info_json = client.lpop(<span class="string">'people_info'</span>)</span><br><span class="line">    <span class="keyword">if</span> people_info_json:</span><br><span class="line">        people_info = json.loads(people_info_json.decode())</span><br><span class="line">        people_info_list.append(people_info)</span><br><span class="line">        <span class="comment"># 如果列表中的数据超过1000条就先插入数据库</span></span><br><span class="line">        <span class="keyword">if</span> len(people_info_list) &gt;= <span class="number">1000</span>:</span><br><span class="line">            handler.insert_many(people_info_list)</span><br><span class="line">            people_info_list = []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一轮可能凑不够1000条数据，所以还需要看看是否需要再次插入</span></span><br><span class="line"><span class="keyword">if</span> people_info_list:</span><br><span class="line">    handler.insert_many(people_info_list)</span><br></pre></td></tr></table></figure></p></blockquote><p>6.批量插入持续性数据</p><blockquote><p>如果<code>Redis</code>中的数据是持续性数据，则会有新的数据源源不断被加入到<code>Redis</code>中，每次添加的时间间隔不定，代码可以修改为如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = redis.Redis()</span><br><span class="line">handler = pymongo.MongoClient().chatper_8.people_info</span><br><span class="line"></span><br><span class="line">people_info_list = []</span><br><span class="line"><span class="comment"># 计数变量，只要请求Redis的次数为1000的倍数，那就批量插入数据库，这样保证people_info_list的数据最多等待100秒就会被插入数据库</span></span><br><span class="line">get_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    people_info_json = client.lpop(<span class="string">'people_info'</span>)</span><br><span class="line">    <span class="keyword">if</span> people_info_json:</span><br><span class="line">        people_info = json.loads(people_info_json.decode())</span><br><span class="line">        people_info_list.append(people_info)</span><br><span class="line">        <span class="keyword">if</span> len(people_info_list) &gt;= <span class="number">1000</span>:</span><br><span class="line">            handler.insert_many(people_info_list)</span><br><span class="line">            people_info_list = []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> people_info_list <span class="keyword">and</span> get_count % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            handler.insert_many(people_info_list)</span><br><span class="line">            people_info_list = []</span><br><span class="line">        time.sleep(<span class="number">0.1</span>) <span class="comment"># 在本次发现redis为空的情况下，暂停0.1秒，这样做可以显著降低CPU的占用</span></span><br><span class="line">    get_count += <span class="number">1</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>插入与更新数据，比较性能差异</strong></p><blockquote><p>更新操作（特别是逐条更新）比较浪费时间，因为它实际上包含了“查询”和“修改”两个步骤。与“插入”不一样，某些情况下数据的“更新”没办法实现批量操作，必须逐条更新。</p></blockquote><p>1.逐条更新数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">handler = pymongo.MongoClient().chapter_8.one_by_one</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> handler.find(&#123;&#125;, &#123;<span class="string">'salary'</span>: <span class="number">1</span>&#125;):</span><br><span class="line">    salary = int(row[<span class="string">'salary'</span>])</span><br><span class="line">    new_salary = salary + <span class="number">100</span></span><br><span class="line">    handler.update_one(&#123;<span class="string">'_id'</span>: row[<span class="string">'_id'</span>]&#125;, &#123;<span class="string">'$set'</span>: &#123;<span class="string">'salary'</span>: str(new_salary)&#125;&#125;)</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(<span class="string">'逐条更新数据，耗时：'</span>, end_time - start_time)</span><br></pre></td></tr></table></figure></p><ul><li>逐条更新数据，耗时： 35.01171922683716</li></ul><p>2.用插入数据代替更新数据</p><blockquote><p>对于必须逐条更新大量数据的情况，也可以使用插入代替更新来提高性能。<br>基本逻辑是：把数据插入到另外一个集合，然后删除原来的集合，再把新集合名改名为原来的集合<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">db = pymongo.MongoClient().chapter_8</span><br><span class="line">batch = db.batch</span><br><span class="line">new_collection = db.update_by_insert</span><br><span class="line">new_people_info_list = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> batch.find():</span><br><span class="line">    salary = int(row[<span class="string">'salary'</span>])</span><br><span class="line">    new_salary = salary + <span class="number">100</span></span><br><span class="line">    row[<span class="string">'salary'</span>] = str(new_salary)</span><br><span class="line">    new_people_info_list.append(row)</span><br><span class="line">new_collection.insert_many(new_people_info_list)</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(<span class="string">'使用插入代替更新，耗时：'</span>, end_time - start_time)</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>使用插入代替更新，耗时： 2.155980110168457</li></ul><p><strong>使用索引提高查询速度</strong></p><blockquote><p>索引是一种特殊的数据结构，它使用了能够快速遍历的形式记录了集合中数据的位置。如果不使用索引，则每一次查询数据都会遍历整个集合；如果使用了索引，则数据库会直接根据索引快速找到需要的内容</p></blockquote><p>创建索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">handler = pymongo.MongoClient().chapter8.one_by_one</span><br><span class="line"><span class="comment"># 创建索引，background为False，在创建索引时，这个集合就不能被查询和写入，但是速度快</span></span><br><span class="line"><span class="comment"># background为True，在创建索引时速度会慢一些，但是不影响其他程序读写这个集合</span></span><br><span class="line">handler.create_index(<span class="string">"salary"</span>,background=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><ul><li>索引是以空间换时间。集合中的数据越多，索引占用的硬盘空间就越多。所以对必要的字段添加索引，不要对所有字段都添加索引</li><li><code>_id</code>默认自带索引，不需要添加</li></ul><p><strong>引入redis,以降低mongodb读取频率</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    all_title = mongo_handler.disinct(<span class="string">'title'</span>)</span><br><span class="line">    redis_client.sadd(<span class="string">'news_title'</span>,*all_title)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">need_insert_news</span><span class="params">(news_title)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> redis_client.sadd(<span class="string">'news_title'</span>,news_title) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>增添适当冗余信息，以提高查询速度</strong><br>在插入数据库时，添加一个特殊字段<code>special</code>，满足条件就是<code>True</code>,不满足条件就是<code>False</code>.通过<code>special</code>这个字段来提高查找效率.</p><h2 id="提高MongoDB的安全性"><a href="#提高MongoDB的安全性" class="headerlink" title="提高MongoDB的安全性"></a>提高MongoDB的安全性</h2><p><strong>配置权限管理机制</strong></p><blockquote><p>为了增强<code>MongoDB</code>的安全性，需要配置基于角色的访问控制机制（Role-Based Access Control）</p></blockquote><p>1.创建管理员用户</p><blockquote><p>管理员的作用是创建其他用户。管理员用户本身不能对数据库进行控制。</p></blockquote><ul><li><p>创建管理员账户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user:"admin",</span><br><span class="line">    pwd:"123456789",</span><br><span class="line">    roles:[&#123;role:"userAdminAnyDatabase",db:"admin"&#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件,启用权限管理功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure></li><li><p>重启<code>MongoDB</code>数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 执行mongo命令，发现虽然能够连上数据库，但是已经不能执行常规操作了</span><br><span class="line"><span class="meta">#</span> 使用以下命令登录mongo</span><br><span class="line">mongo -u 'admin' -p '123456' --authenticationDatabase 'admin'</span><br></pre></td></tr></table></figure></li></ul><p>2.创建普通用户</p><blockquote><p>管理员账户没有权限操作普通数据库。要操作普通数据库，还需要创建普通用户。</p></blockquote><p>创建一个对<code>chaprter_8</code>数据库有读写权限，对<code>chapter_4</code>只有读权限的普通用户。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use chapter_8</span><br><span class="line"></span><br><span class="line">db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">    user:"kingname",</span><br><span class="line">    pwd:"123456",</span><br><span class="line">    roles:[&#123;role:'readWrite',db:'chapter_8'&#125;,</span><br><span class="line">            &#123;role:'read',db:'chapter_4'&#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>3.创建能操作数据库的超级管理员</p><blockquote><p>管理员账户能创建其他用户，看似权限很大，但不能访问任何一个数据库。所以如果有必要，还需要创建一个能对所有数据库都有全部权限的用户。</p></blockquote><p>创建能操作数据库的管理员<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line"></span><br><span class="line">db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">    user:"root",</span><br><span class="line">    pwd:"123456",</span><br><span class="line">    roles:['root']</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>开放外网访问</strong></p><p>修改<code>mongodb</code>配置文件之后重启数据库<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 编辑文件/etc/mongodb.conf</span><br><span class="line">bind_ip:0.0.0.0</span><br></pre></td></tr></table></figure></p><p><strong>连接数据库</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongo --host localhost:27017 -u root -p --authenticationDatabase admin</span><br><span class="line">mongo 127.0.0.1:27017/admin  -u root  -p  password</span><br></pre></td></tr></table></figure></p><p><strong>数据库导出和恢复</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 恢复数据库</span><br><span class="line">mongorestore --host localhost:27017 --username test --password ************ --gzip --archive=xxx.gz --db xxx</span><br></pre></td></tr></table></figure></p><p>参数说明</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用pymongo操作MongoDB数据库&quot;&gt;&lt;a href=&quot;#使用pymongo操作MongoDB数据库&quot; class=&quot;headerlink&quot; title=&quot;使用pymongo操作MongoDB数据库&quot;&gt;&lt;/a&gt;使用pymongo操作MongoDB数据库&lt;/
      
    
    </summary>
    
      <category term="Database" scheme="http://saltci.xyz/categories/Database/"/>
    
      <category term="MongoDB" scheme="http://saltci.xyz/categories/Database/MongoDB/"/>
    
    
      <category term="Python,mongodb" scheme="http://saltci.xyz/tags/Python-mongodb/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本编程</title>
    <link href="http://saltci.xyz/Linux/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/"/>
    <id>http://saltci.xyz/Linux/shell脚本编程/</id>
    <published>2020-02-01T14:00:00.000Z</published>
    <updated>2020-11-27T07:02:13.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一个shell脚本"><a href="#第一个shell脚本" class="headerlink" title="第一个shell脚本"></a>第一个shell脚本</h1><p><strong>编写</strong><br>新建扩展名为<code>.sh</code>的文件,文件内容如下:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">echo "hello world!"</span><br></pre></td></tr></table></figure></p><p>正文的第一行#!/bin/bash告诉shell这个脚本需要什么解释器来执行</p><p><strong>运行脚本</strong></p><p>运行<code>shell</code>脚本有两种办法：</p><ul><li><p>作为可执行程序:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh</span><br><span class="line">./test.sh</span><br></pre></td></tr></table></figure></li><li><p>作为解释器参数:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash test.sh</span><br></pre></td></tr></table></figure></li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><strong>自定义变量</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span> 定义变量</span><br><span class="line">your_name='test'</span><br><span class="line"><span class="meta">#</span> 使用变量</span><br><span class="line">echo $your_name</span><br><span class="line">echo $&#123;your_name&#125;</span><br></pre></td></tr></table></figure></p><p>注：</p><ul><li>变量名和等号之间不能有空格</li><li>shell的变量属于弱类型</li><li>变量名：数字，下划线，字母组成，不能以数字开始</li></ul><p><strong>预设变量</strong></p><p>示例一：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">echo $USER $UID $PWD $PATH</span><br><span class="line">sleep 100 &amp;</span><br><span class="line">echo $!</span><br></pre></td></tr></table></figure></p><ul><li><code>PATH</code>变量: 存储命令搜索路径</li><li><code>$$</code>: 当前进程的进程号</li><li><code>$!</code>: 前一个后台进程的进程号</li></ul><p>示例二：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line">echo $*</span><br><span class="line">echo $#</span><br><span class="line"><span class="meta">#</span> chmod +x test.sh</span><br><span class="line"><span class="meta">#</span> ./test.sh a 11 c op</span><br><span class="line"><span class="meta">#</span> a</span><br><span class="line"><span class="meta">#</span> 11</span><br><span class="line"><span class="meta">#</span> a 11 c op</span><br><span class="line"><span class="meta">#</span> 4</span><br></pre></td></tr></table></figure></p><ul><li><code>$1</code>: 脚本的第一个参数</li><li><code>$2</code>: 脚本的第二个参数</li><li><code>$*</code>: 所有参数的值</li><li><code>$#</code>: 所有参数的个数</li><li><code>$?</code>: 返回上一个命令的执行状态(0表示正确,非0表示不正确)</li></ul><p>示例三: <code>read</code>命令读取用户输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">read -p 请输入用户名: username</span><br><span class="line">read -p 请输入密码: password</span><br><span class="line">useradd $username</span><br><span class="line">echo "$username:$password" | chpasswd</span><br></pre></td></tr></table></figure><ul><li>等待用户输入<ul><li><code>read -p “提示信息:” 变量名</code></li><li><code>read -t 2 -p ”提示信息:“ 变量名</code>（限制2秒钟之内必须输入值）</li></ul></li></ul><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>字符串是shell编程中最常见的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p><strong>单引号</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = 'this is a string'</span><br></pre></td></tr></table></figure></p><p>单引号字符串限制:</p><ul><li>单引号中任何字符都会原样输出，单引号字符中的变量是无效的</li><li>单引号字符中不能出现单引号(对单引号使用转义符后也不行)</li></ul><p><strong>双引号</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">your_name='test'</span><br><span class="line">str="Hello, I know you are \"$&#123;your_name&#125;\"! \n"</span><br></pre></td></tr></table></figure></p><ul><li>双引号内可以有变量</li><li>双引号内可以出现转义字符</li></ul><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p><strong>字符串拼接</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">you_name="test"</span><br><span class="line">greeting="hello, $&#123;you_name&#125; !"</span><br><span class="line">echo greeting</span><br></pre></td></tr></table></figure></p><p><strong>获取字符串长度</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string="abcd"</span><br><span class="line">echo $&#123;#string&#125;  # 4</span><br></pre></td></tr></table></figure></p><p><strong>提取子字符串</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string="alibaba is a great company"</span><br><span class="line">echo $&#123;string:1:4&#125;  # 输出 liba</span><br></pre></td></tr></table></figure></p><p><strong>查找子字符串</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string="alibaba is a great company"</span><br><span class="line">echo `expr index "$string" is` # 输出3</span><br></pre></td></tr></table></figure></p><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p><strong>判断的语法格式</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 判断语句括号两边必须有空格</span><br><span class="line">[ 判断语句 ]</span><br><span class="line"><span class="meta">#</span> A &amp;&amp; B 仅当A成功时才执行B </span><br><span class="line"><span class="meta">#</span> A || B 仅当A失败时才执行B</span><br></pre></td></tr></table></figure></p><p><strong>字符判断</strong></p><ul><li><code>[ A == A ]</code> 判断相等</li><li><code>[ A != B ]</code> 判断不相等</li><li><code>[ -z $变量 ]</code> 判断是否为空<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">read -p "请输入用户名:" username</span><br><span class="line">[ -z $username ] &amp;&amp; exit</span><br><span class="line">read -p "请输入密码:" passwd</span><br><span class="line">[ -z $passwd ] &amp;&amp; exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> useradd $username</span><br><span class="line"><span class="meta">#</span> echo "$username:$passwd" | chpasswd</span><br></pre></td></tr></table></figure></li></ul><p><strong>数字比较</strong></p><ul><li><code>-eq</code> :等于(equal)</li><li><code>-ne</code> :不等于(not equal)</li><li><code>-gt</code> :大于(greater than)</li><li><code>-ge</code> :大于等于(great or equal)</li><li><code>-lt</code> :小于(less than)</li><li><code>-le</code> :小于等于(less or equal)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 3 -eq 3 ] &amp;&amp; echo Y || echo N</span><br></pre></td></tr></table></figure></li></ul><p><strong>文件和目录</strong></p><ul><li><code>[ -e 文件或目录 ]</code> :是否存在</li><li><code>[ -f 文件 ]</code> :存在且为文件</li><li><code>[ -d 目录 ]</code> :存在且为目录</li><li><code>[ -r 文件或目录 ]</code> :判断是否可读</li><li><code>[ -w 文件或目录 ]</code> :判断文件是否可写</li><li><code>[ -x 文件或目录 ]</code> :判断文件是否可执行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ -e /etc/passwd ] &amp;&amp; echo Y || echo N</span><br><span class="line">[ -f /etc/passwd ] &amp;&amp; echo Y || echo N</span><br><span class="line">[ -d /etc/passwd ] &amp;&amp; echo Y || echo N</span><br></pre></td></tr></table></figure></li></ul><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p><strong>单分支</strong></p><p><strong>双分支</strong></p><p><strong>多分支</strong></p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><blockquote><ul><li><a href="https://book.douban.com/subject/26858110/" rel="external nofollow noopener noreferrer" target="_blank">Linux运维之道</a></li></ul></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" rel="external nofollow noopener noreferrer" target="_blank">Shell脚本编程30分钟入门</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一个shell脚本&quot;&gt;&lt;a href=&quot;#第一个shell脚本&quot; class=&quot;headerlink&quot; title=&quot;第一个shell脚本&quot;&gt;&lt;/a&gt;第一个shell脚本&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;编写&lt;/strong&gt;&lt;br&gt;新建扩展名为&lt;code&gt;.sh
      
    
    </summary>
    
      <category term="Linux" scheme="http://saltci.xyz/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://saltci.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>pandas</title>
    <link href="http://saltci.xyz/Python/data_analysis/pandas/"/>
    <id>http://saltci.xyz/Python/data_analysis/pandas/</id>
    <published>2020-01-22T07:44:42.000Z</published>
    <updated>2020-11-27T07:02:13.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pandas概述"><a href="#pandas概述" class="headerlink" title="pandas概述"></a>pandas概述</h1><ul><li><code>pandas</code>是一种Python数据分析利器,是一个开源的数据分析包,最初是应用于金融数据分析工具而开发,因此<code>pandas</code>为时间序列提供了很好的支持.</li></ul><p><strong>pandas导入</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure></p><p><strong>pandas基本数据结构</strong></p><ul><li><strong>Series</strong>: 一种类似于一维数组的对象,由一组数据(各种numpy数据类型)以及一组与之相关的数据标签(即索引)组成.仅由一组数据也可产生简单的Series对象.注意:Series中的索引值是可以重复的.</li><li><strong>DataFrame</strong>: 一个表格型的数据结构,包含有一组有序的列,每列可以实不同的值类型(数值,字符串,布尔型等),<code>DataFrame</code>即有行索引也有列索引,可以被看作是由<code>Series</code>组成的字典.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pandas概述&quot;&gt;&lt;a href=&quot;#pandas概述&quot; class=&quot;headerlink&quot; title=&quot;pandas概述&quot;&gt;&lt;/a&gt;pandas概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pandas&lt;/code&gt;是一种Python数据分析利器,是一个开源
      
    
    </summary>
    
      <category term="Python" scheme="http://saltci.xyz/categories/Python/"/>
    
      <category term="data_analysis" scheme="http://saltci.xyz/categories/Python/data-analysis/"/>
    
    
      <category term="Python" scheme="http://saltci.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>wget命令</title>
    <link href="http://saltci.xyz/Linux/wget%E5%91%BD%E4%BB%A4/"/>
    <id>http://saltci.xyz/Linux/wget命令/</id>
    <published>2020-01-22T03:43:52.000Z</published>
    <updated>2020-11-27T07:02:13.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wget命令使用实例"><a href="#wget命令使用实例" class="headerlink" title="wget命令使用实例"></a>wget命令使用实例</h1><p><strong>实例1:使用wget下载单个文件</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>wget http://www.minjieren.com/wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure></p><p><strong>实例2：使用wget -O下载并以不同的文件名保存</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>wget -O wordpress.zip http://www.minjieren.com/download.aspx?id=1080</span><br></pre></td></tr></table></figure></p><p>wget默认会以最后一个符合”/”的后面的字符来命令，对于动态链接的下载通常文件名会不正确。</p><p><strong>实例3：使用wget –limit -rate限速下载</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>wget --limit-rate=300k http://www.minjieren.com/wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure></p><p><strong>实例4：使用wget -c断点续传</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure></p><p><strong>实例5：使用wget -b后台下载</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>wget -b http://www.minjieren.com/wordpress-3.1-zh_CN.zip</span><br><span class="line">Continuing in background, pid 1840.</span><br><span class="line">Output will be written to 'wget-log'.</span><br></pre></td></tr></table></figure></p><p>对于下载非常大的文件的时候，我们可以使用参数-b进行后台下载。</p><p>你可以使用以下命令来察看下载进度:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>tail -f wget-log</span><br></pre></td></tr></table></figure></p><p><strong>实例6：伪装代理名称下载</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --user-agent="Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16" http://www.minjieren.com/wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure></p><p><strong>实例7：使用wget -i下载多个文件</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>cat &gt; filelist.txt</span><br><span class="line">url1</span><br><span class="line">url2</span><br><span class="line">url3</span><br><span class="line">url4</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>wget -i filelist.txt</span><br></pre></td></tr></table></figure></p><p><strong>实例8：使用wget –mirror镜像网站</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>wget --mirror -p --convert-links -P ./LOCAL URL</span><br></pre></td></tr></table></figure></p><p>下载整个网站到本地</p><ul><li>–miror:开户镜像下载</li><li>-p:下载所有为了html页面显示正常的文件</li><li>-convert-links:下载后，转换成本地的链接</li><li>-P ./LOCAL：保存所有文件和目录到本地指定目录</li></ul><p><strong>实例9: 使用wget -r -A下载指定格式文件</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>wget -r -A.pdf url</span><br></pre></td></tr></table></figure></p><p>可以在以下情况使用该功能：</p><ul><li>下载一个网站的所有图片</li><li>下载一个网站的所有视频</li><li>下载一个网站的所有PDF文件</li></ul><p><strong>实例10：使用wget FTP下载</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>wget ftp-url</span><br><span class="line"><span class="meta">$</span>wget --ftp-user=USERNAME --ftp-password=PASSWORD url</span><br></pre></td></tr></table></figure></p><p>可以使用wget来完成ftp链接的下载</p><ul><li>使用wget匿名ftp下载：wget ftp-url</li><li>使用wget用户名和密码认证的ftp下载:wget –ftp-user=USERNAME –ftp-password=PASSWORD url</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/wget.html" rel="external nofollow noopener noreferrer" target="_blank">Linux Tools Quick Tutorial</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;wget命令使用实例&quot;&gt;&lt;a href=&quot;#wget命令使用实例&quot; class=&quot;headerlink&quot; title=&quot;wget命令使用实例&quot;&gt;&lt;/a&gt;wget命令使用实例&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;实例1:使用wget下载单个文件&lt;/strong&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://saltci.xyz/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://saltci.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>jupyter_notebook常用指南</title>
    <link href="http://saltci.xyz/Python/data_analysis/jupyter_notebook/"/>
    <id>http://saltci.xyz/Python/data_analysis/jupyter_notebook/</id>
    <published>2020-01-21T05:42:42.000Z</published>
    <updated>2020-11-27T07:02:13.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift + enter    运行</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p>- </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用快捷键&quot;&gt;&lt;a href=&quot;#常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;常用快捷键&quot;&gt;&lt;/a&gt;常用快捷键&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="Python" scheme="http://saltci.xyz/categories/Python/"/>
    
      <category term="data_analysis" scheme="http://saltci.xyz/categories/Python/data-analysis/"/>
    
    
      <category term="Python" scheme="http://saltci.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>numpy</title>
    <link href="http://saltci.xyz/Python/data_analysis/numpy/"/>
    <id>http://saltci.xyz/Python/data_analysis/numpy/</id>
    <published>2020-01-21T05:11:42.000Z</published>
    <updated>2020-11-27T07:02:13.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="numpy简介"><a href="#numpy简介" class="headerlink" title="numpy简介"></a>numpy简介</h1><ul><li><code>numpy</code>是以矩阵为基础的数学计算模块,纯数学存储和处理大型矩阵,是Python进行科学计算的基础</li><li><code>numpy</code>是其它数据分析及机器学习库的底层库</li><li><code>numpy</code>基于标准C语言实现,运行效率充分优化</li></ul><h1 id="numpy基础"><a href="#numpy基础" class="headerlink" title="numpy基础"></a>numpy基础</h1><h2 id="ndarray数组创建"><a href="#ndarray数组创建" class="headerlink" title="ndarray数组创建"></a>ndarray数组创建</h2><p><strong>np.array</strong>:接收一个普通python序列,并将其转换为ndarray<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment"># array([1, 2, 3])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用元组创建</span></span><br><span class="line">np.array((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># array([1, 2, 3])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多维数组</span></span><br><span class="line">np.array(</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">)</span><br><span class="line"><span class="comment"># array([[1, 2, 3, 4],</span></span><br><span class="line"><span class="comment">#        [5, 6, 7, 8]])</span></span><br></pre></td></tr></table></figure></p><p><strong>np.zeros(数组元素个数,dtype=’类型’)</strong>:创建指定长度或者形状的全零数组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.zeros((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># array([[0., 0., 0.],</span></span><br><span class="line"><span class="comment">#        [0., 0., 0.],</span></span><br><span class="line"><span class="comment">#        [0., 0., 0.]])</span></span><br><span class="line">np.zeros(<span class="number">10</span>,dtype=<span class="string">'int32'</span>)</span><br><span class="line"><span class="comment"># array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])</span></span><br></pre></td></tr></table></figure></p><p><strong>np.ones(数组元素个数,dtype=’类型’)</strong>:创建指定长度或者形状的全1数组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.ones((<span class="number">3</span>,<span class="number">3</span>),dtype=<span class="string">'int32'</span>)</span><br><span class="line"><span class="comment"># array([[1, 1, 1],</span></span><br><span class="line"><span class="comment">#       [1, 1, 1],</span></span><br><span class="line"><span class="comment">#       [1, 1, 1]])</span></span><br></pre></td></tr></table></figure></p><p><strong>np.empty(shape,dtype=’float’,order=’C’)</strong>:创建指定形状和dtype的未初始化数组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.empty((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># array([[1., 1., 1.],</span></span><br><span class="line"><span class="comment">#       [1., 1., 1.],</span></span><br><span class="line"><span class="comment">#       [1., 1., 1.]])</span></span><br></pre></td></tr></table></figure></p><p><strong>np.arange(起始值,终止值,步长)</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.arange(<span class="number">0</span>,<span class="number">9</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># array([1, 3, 5, 7])</span></span><br></pre></td></tr></table></figure></p><p><strong>np.linspace()</strong>:生成等差数列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment"># array([ 1.  ,  3.25,  5.5 ,  7.75, 10.  ])</span></span><br></pre></td></tr></table></figure></p><p><strong>np.logspace()</strong>:生成等比数列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.logspace(<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment"># array([  1.        ,   3.16227766,  10.        ,  31.6227766 ,</span></span><br><span class="line"><span class="comment">#       100.        ])</span></span><br><span class="line">np.logspace(<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,base=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># array([1.        , 1.41421356, 2.        , 2.82842712, 4.        ])</span></span><br></pre></td></tr></table></figure></p><p><strong>np.random</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.random((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># array([[0.80835636, 0.29228671, 0.53821761],</span></span><br><span class="line"><span class="comment">#       [0.62159912, 0.92745278, 0.7099457 ],</span></span><br><span class="line"><span class="comment">#       [0.37325982, 0.31742215, 0.71386294]])</span></span><br><span class="line">np.random.randint(<span class="number">1</span>,<span class="number">9</span>,size=(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># array([[3, 6, 6],</span></span><br><span class="line"><span class="comment">#       [2, 2, 8],</span></span><br><span class="line"><span class="comment">#       [8, 5, 8]])</span></span><br><span class="line">np.random.randn(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># array([[ 1.00618523, -0.44050643,  0.08845778],</span></span><br><span class="line"><span class="comment">#       [-0.31211208,  0.9232979 , -1.19750328],</span></span><br><span class="line"><span class="comment">#       [-0.40024231,  1.50681083, -0.85000261]])</span></span><br><span class="line">np.random.rand(<span class="number">9</span>)</span><br><span class="line"><span class="comment"># array([0.38573675, 0.86529341, 0.07380751, 0.65909173, 0.60161683,</span></span><br><span class="line"><span class="comment">#       0.19712216, 0.09138534, 0.09792456, 0.92164262])</span></span><br></pre></td></tr></table></figure></p><h2 id="ndarray对象属性"><a href="#ndarray对象属性" class="headerlink" title="ndarray对象属性"></a>ndarray对象属性</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://www.runoob.com/numpy/numpy-tutorial.html" rel="external nofollow noopener noreferrer" target="_blank">菜鸟教程 Numpy</a></li><li><a href="https://www.numpy.org.cn/user/" rel="external nofollow noopener noreferrer" target="_blank">numpy中文网</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;numpy简介&quot;&gt;&lt;a href=&quot;#numpy简介&quot; class=&quot;headerlink&quot; title=&quot;numpy简介&quot;&gt;&lt;/a&gt;numpy简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt;是以矩阵为基础的数学计算模块,纯数学存储和处理大型矩
      
    
    </summary>
    
      <category term="Python" scheme="http://saltci.xyz/categories/Python/"/>
    
      <category term="data_analysis" scheme="http://saltci.xyz/categories/Python/data-analysis/"/>
    
    
      <category term="Python" scheme="http://saltci.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>lsof命令</title>
    <link href="http://saltci.xyz/Linux/lsof%E5%91%BD%E4%BB%A4/"/>
    <id>http://saltci.xyz/Linux/lsof命令/</id>
    <published>2020-01-21T02:48:52.000Z</published>
    <updated>2020-11-27T07:02:13.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lsof命令"><a href="#lsof命令" class="headerlink" title="lsof命令"></a>lsof命令</h1><p><code>lsof</code>(list open files)是一个查看当前系统文件的工具.在Linux环境下,任何事物都以文件的形式存在,通过文件不仅仅可以访问常规数据,还可以访问网络连接和硬件.如传输控制协议(TCP)和用户数据报协议(UDP)套接字等,系统后台都为该应用程序分配了一个文件描述符,该文件描述符提供了大量关于这个应用程序本身的信息.</p><p><code>lsof</code>可以打开的文件可以是:</p><ol><li>普通文件</li><li>目录</li><li>网络文件系统的文件</li><li>字符和设备文件</li><li>(函数)共享库</li><li>管道,命名管道</li><li>符号链接</li><li>网络文件(如:NFS file,网络Socket,unix域名socket)</li><li>等等</li></ol><h2 id="lsof命令参数"><a href="#lsof命令参数" class="headerlink" title="lsof命令参数"></a>lsof命令参数</h2><ul><li>-a 列出打开文件存在的进程</li><li>-c&lt;进程名&gt; 列出指定进程所打开的文件</li><li>-g 列出GID号进程详情</li><li>-d&lt;文件号&gt; 列出占用该文件号的进程</li><li>+d&lt;目录&gt; 列出目录下被打开的文件</li><li>+D&lt;目录&gt; 递归列出目录下被打开的文件</li><li>-n&lt;目录&gt; 列出使用NFS的文件</li><li>-i&lt;条件&gt; 列出符合条件的进程。（4、6、协议、:端口、 @ip ）</li><li>-p&lt;进程号&gt; 列出指定进程号所打开的文件</li><li>-u 列出UID号进程详情</li><li>-h 显示帮助信息</li><li>-v 显示版本信息</li></ul><h2 id="lsof使用实例"><a href="#lsof使用实例" class="headerlink" title="lsof使用实例"></a>lsof使用实例</h2><p><strong>实例1: 无任何参数</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>lsof | more</span><br><span class="line"></span><br><span class="line">COMMAND     PID   TID           USER   FD      TYPE             DEVICE  SIZE/OFF       NODE NAME</span><br><span class="line">systemd       1                 root  cwd       DIR              253,1      4096          2 /</span><br><span class="line">systemd       1                 root  rtd       DIR              253,1      4096          2 /</span><br></pre></td></tr></table></figure></p><p>说明:</p><p><code>lsof</code>输出各列信息的意义如下:</p><ul><li>COMMAND:进程的名称</li><li>PID:进程标识符</li><li>USER:进程所有者</li><li><p>FD:文件描述符,应用程序通过文件描述符识别该文件,如<code>cwd</code>,<code>txt</code>等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">（1）cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改</span><br><span class="line">（2）txt ：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序</span><br><span class="line">（3）lnn：library references (AIX);</span><br><span class="line">（4）er：FD information error (see NAME column);</span><br><span class="line">（5）jld：jail directory (FreeBSD);</span><br><span class="line">（6）ltx：shared library text (code and data);</span><br><span class="line">（7）mxx ：hex memory-mapped type number xx.</span><br><span class="line">（8）m86：DOS Merge mapped file;</span><br><span class="line">（9）mem：memory-mapped file;</span><br><span class="line">（10）mmap：memory-mapped device;</span><br><span class="line">（11）pd：parent directory;</span><br><span class="line">（12）rtd：root directory;</span><br><span class="line">（13）tr：kernel trace file (OpenBSD);</span><br><span class="line">（14）v86  VP/ix mapped file;</span><br><span class="line">（15）0：表示标准输入</span><br><span class="line">（16）1：表示标准输出</span><br><span class="line">（17）2：表示标准错误</span><br><span class="line">一般在标准输出、标准错误、标准输入后还跟着文件状态模式：r、w、u等</span><br><span class="line">（1）u：表示该文件被打开并处于读取/写入模式</span><br><span class="line">（2）r：表示该文件被打开并处于只读模式</span><br><span class="line">（3）w：表示该文件被打开并处于</span><br><span class="line">（4）空格：表示该文件的状态模式为unknow，且没有锁定</span><br><span class="line">（5）-：表示该文件的状态模式为unknow，且被锁定</span><br><span class="line">同时在文件状态模式后面，还跟着相关的锁</span><br><span class="line">（1）N：for a Solaris NFS lock of unknown type;</span><br><span class="line">（2）r：for read lock on part of the file;</span><br><span class="line">（3）R：for a read lock on the entire file;</span><br><span class="line">（4）w：for a write lock on part of the file;（文件的部分写锁）</span><br><span class="line">（5）W：for a write lock on the entire file;（整个文件的写锁）</span><br><span class="line">（6）u：for a read and write lock of any length;</span><br><span class="line">（7）U：for a lock of unknown type;</span><br><span class="line">（8）x：for an SCO OpenServer Xenix lock on part      of the file;</span><br><span class="line">（9）X：for an SCO OpenServer Xenix lock on the      entire file;</span><br><span class="line">（10）space：if there is no lock.</span><br></pre></td></tr></table></figure></li><li><p>TYPE:文件类型,如<code>DIR</code>,<code>REG</code>等,常见的文件类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）DIR：表示目录</span><br><span class="line">（2）CHR：表示字符类型</span><br><span class="line">（3）BLK：块设备类型</span><br><span class="line">（4）UNIX： UNIX 域套接字</span><br><span class="line">（5）FIFO：先进先出 (FIFO) 队列</span><br><span class="line">（6）IPv4：网际协议 (IP) 套接字</span><br></pre></td></tr></table></figure></li><li><p>DEVICE:指定磁盘的名称</p></li><li>SIZE:文件的大小</li><li>NODE:索引节点(文件在磁盘上的标识)</li><li>NAME:打开文件的确切名称</li></ul><p><strong>实例2: 查看某个文件相关的进程</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>lsof /bin/bash</span><br><span class="line"></span><br><span class="line">COMMAND     PID USER  FD   TYPE DEVICE SIZE/OFF    NODE NAME</span><br><span class="line">mysqld_sa  2169 root txt    REG  253,0   938736 4587562 /bin/bash</span><br><span class="line">ksmtuned   2334 root txt    REG  253,0   938736 4587562 /bin/bash</span><br><span class="line">bash      20121 root txt    REG  253,0   938736 4587562 /bin/bash</span><br></pre></td></tr></table></figure></p><p><strong>实例3: 列出某个用户打开的文件信息</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>lsof -u &lt;username&gt;</span><br></pre></td></tr></table></figure></p><p><strong>实例4: 列出某个程序进程所打开的文件信息</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>lsof -c mysql</span><br><span class="line"><span class="meta">$</span>lsof | grep mysql</span><br></pre></td></tr></table></figure></p><p><strong>实例5:列出谁在使用某个端口</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>lsof -i:3306</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/lsof.html" rel="external nofollow noopener noreferrer" target="_blank">lsof 一切皆文件</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lsof命令&quot;&gt;&lt;a href=&quot;#lsof命令&quot; class=&quot;headerlink&quot; title=&quot;lsof命令&quot;&gt;&lt;/a&gt;lsof命令&lt;/h1&gt;&lt;p&gt;&lt;code&gt;lsof&lt;/code&gt;(list open files)是一个查看当前系统文件的工具.在Linu
      
    
    </summary>
    
      <category term="Linux" scheme="http://saltci.xyz/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://saltci.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>time和datetime模块</title>
    <link href="http://saltci.xyz/Python/time%E5%92%8Cdatetime%E6%A8%A1%E5%9D%97/"/>
    <id>http://saltci.xyz/Python/time和datetime模块/</id>
    <published>2020-01-19T13:11:42.000Z</published>
    <updated>2020-11-27T07:02:13.806Z</updated>
    
    <content type="html"><![CDATA[<p>Python提供了多种多样对时间日期的处理方式，平常使用最多的就是<code>time</code>和<code>datetime</code>这两个模块。</p><h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><h1 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://docs.python.org/zh-cn/3.7/library/time.html#module-time" rel="external nofollow noopener noreferrer" target="_blank">time模块Python官方文档</a></li><li><a href="https://docs.python.org/zh-cn/3.7/library/datetime.html#module-datetime" rel="external nofollow noopener noreferrer" target="_blank">datetime模块Python官方文档</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python提供了多种多样对时间日期的处理方式，平常使用最多的就是&lt;code&gt;time&lt;/code&gt;和&lt;code&gt;datetime&lt;/code&gt;这两个模块。&lt;/p&gt;
&lt;h1 id=&quot;time&quot;&gt;&lt;a href=&quot;#time&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Python" scheme="http://saltci.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="http://saltci.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>crontab命令</title>
    <link href="http://saltci.xyz/Linux/crontab%E5%91%BD%E4%BB%A4/"/>
    <id>http://saltci.xyz/Linux/crontab命令/</id>
    <published>2020-01-16T05:49:52.000Z</published>
    <updated>2020-11-27T07:02:13.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="crontab命令"><a href="#crontab命令" class="headerlink" title="crontab命令"></a>crontab命令</h1><ul><li><strong>crontab格式说明</strong></li></ul><p><img src="crontab.png" alt="crontab格式说明"></p><ul><li><strong>编辑crontab</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><ul><li><strong>查看计划任务</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h1 id="crontab使用实例"><a href="#crontab使用实例" class="headerlink" title="crontab使用实例"></a>crontab使用实例</h1><ul><li><strong>实例1: 每1分钟执行一次myCommand</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * * myCommand</span><br></pre></td></tr></table></figure><ul><li><strong>实例2:每小时的第3和第15分钟执行</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 * * * * myCommand</span><br></pre></td></tr></table></figure><ul><li><strong>实例3:在上午8点到11点的第3和第15分钟执行</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * * myCommand</span><br></pre></td></tr></table></figure><ul><li><strong>实例4:每隔两天的上午8点到11点的第3和第15分钟执行</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 */2 * * myCommand</span><br></pre></td></tr></table></figure><ul><li><strong>实例5:每周一上午8点到11点的第3和第15分钟执行</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * 1 myCommand</span><br></pre></td></tr></table></figure><ul><li><strong>实例6:每晚的21:30重启smb</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 21 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><ul><li><strong>在重启时运行任务</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在每次重启时都运行一条命令</span><br><span class="line">@reboot python /home/pi/myscript.py</span><br><span class="line"><span class="meta">#</span> 希望命令仅仅在后台运行</span><br><span class="line">@reboot python /home/pi/myscript.py &amp;</span><br></pre></td></tr></table></figure><ul><li><strong>晚上11点到早上7点之间，每隔一小时重启smb</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 23-7 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><h1 id="crontab验证工具"><a href="#crontab验证工具" class="headerlink" title="crontab验证工具"></a>crontab验证工具</h1><ul><li><a href="https://tool.lu/crontab/" rel="external nofollow noopener noreferrer" target="_blank">crontab在线工具</a></li><li><a href="http://www.atool9.com/crontab.php" rel="external nofollow noopener noreferrer" target="_blank">ATools在线crontab校验</a></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html" rel="external nofollow noopener noreferrer" target="_blank">crontab 定时任务</a></li><li><a href="https://shumeipai.nxez.com/2019/12/11/scheduling-tasks-with-cron.html" rel="external nofollow noopener noreferrer" target="_blank">树莓派计划任务的配置方法</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;crontab命令&quot;&gt;&lt;a href=&quot;#crontab命令&quot; class=&quot;headerlink&quot; title=&quot;crontab命令&quot;&gt;&lt;/a&gt;crontab命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;crontab格式说明&lt;/strong&gt;&lt;/li&gt;
&lt;/
      
    
    </summary>
    
      <category term="Linux" scheme="http://saltci.xyz/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://saltci.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>YAML</title>
    <link href="http://saltci.xyz/DevOps/YAML/"/>
    <id>http://saltci.xyz/DevOps/YAML/</id>
    <published>2020-01-15T06:43:05.000Z</published>
    <updated>2020-11-27T07:02:13.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href></a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/u
      
    
    </summary>
    
      <category term="DevOps" scheme="http://saltci.xyz/categories/DevOps/"/>
    
    
  </entry>
  
  <entry>
    <title>Kubernetes基本概念与使用</title>
    <link href="http://saltci.xyz/DevOps/Kubernetes/Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://saltci.xyz/DevOps/Kubernetes/Kubernetes基本概念/</id>
    <published>2020-01-14T16:04:03.000Z</published>
    <updated>2020-11-27T07:02:13.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes基本概念"><a href="#Kubernetes基本概念" class="headerlink" title="Kubernetes基本概念"></a>Kubernetes基本概念</h1><ul><li><strong>Master</strong>: <code>Master</code>节点是<code>Kubernetes</code>集群的<strong>控制节点</strong>,负责整个集群的管理和控制,包含以下组件:<ul><li><strong>kube-apiserver</strong>：集群控制的入口，提供<code>HTTP REST</code> 服务</li><li><strong>kube-controller-manager</strong>：<code>Kubernetes</code> 集群中所有资源对象的自动化控制中心</li><li><strong>kube-scheduler</strong>：负责 <code>Pod</code> 的调度</li></ul></li><li><strong>Node</strong>: <code>Kubernetes</code>集群中的<strong>工作节点</strong>,可以是物理机,也可以是虚拟机。<code>Node</code> 上的工作负载由 Master 节点分配，工作负载主要是运行容器应用。每个<code>Node</code>节点包含以下组件:<ul><li><code>container runtime</code>(<code>docker</code>或<code>rkt</code>)</li><li><code>kubelet</code>:负责<code>Pod</code>的创建,启动,监控,重启,销毁等工作,同时与Master节点协作,实现集群管理的基本功能</li><li><code>kube-proxy</code>:实现<code>Kubernetes Service</code>的通信和负载均衡</li></ul></li><li><strong>Pod</strong>: <code>Pod</code> 是一组紧密关联的容器集合，它们共享 <code>PID</code>、<code>IPC</code>、<code>Network</code> 和 <code>UTS namespace</code>， 是 <code>Kubernetes</code> 最基本的部署调度单元。</li></ul><p><img src="container_pod_node.jpg" alt="容器 Pod及物理工作节点之间的关系"></p><p><img src="structure.png" alt="Kubernetes架构简图"></p><ul><li><strong>Label</strong>: 标签是可以附加到资源的任意键值对,用以选择具有该标签的资源。标签选择器不仅可以组织<code>pod</code>,也可以组织所有其它的<code>Kubernetes</code>资源。</li><li><strong>Label Selector</strong>: 标签选择器根据资源的以下条件来选择资源:<ul><li>包含(或不包含)使用特定键的标签</li><li>包含具有特定键和值的标签</li><li>包含具有特定键的标签,但其值与我们指定的不同</li></ul></li><li><strong>Namespace</strong>: 命名空间是对一组资源和对象进行抽象的集合,常用于隔离资源或隔离用户;常见的<code>pods</code>,<code>services</code>,<code>replication controllers</code>和<code>deployments</code>等都是属于某一个<code>namespace</code>(默认是<code>default</code>),而<code>node</code>,<code>persistentVolumes</code>等则不属于任何<code>namespace</code>.</li><li><strong>Liveness probe</strong>: <code>Kubernetes</code>可以通过存活探针(<code>liveness probe</code>)检查容器是否还在运行,如果探测失败,<code>Kubernetes</code>将定期执行探针并重启容器.</li><li><strong>readinessProbe</strong>: <code>Kubernetes</code>可以定期调用就绪探针来确定特定的<code>Pod</code>是否接收客户端请求.当容器的准备就绪然测返回成功时,表示容器已准备好接收请求.</li><li><strong>Replication Controller</strong>(已弃用)：<code>Replication Controller</code>是一种<code>Kubernetes</code>资源，其工作时确保<code>pod</code>的数量始终与其标签选择器匹配。由三部分组成：<ul><li><strong>lebel selector</strong>: 标签选择器，用于确定<code>replicationcontroller</code>作用域有哪些<code>pod</code></li><li><strong>replica count</strong>:副本个数，指定应运行的<code>pod</code>数量</li><li><strong>pod tepmlate</strong>: <code>pod</code>模板，用于创建新的<code>pod</code>模板</li></ul></li></ul><p><img src="replication_controller.png" alt="ReplicationController的协调流程"></p><ul><li><strong>ReplicaSet</strong>：是 <code>Pod</code> 副本的抽象，用于解决 <code>Pod</code> 的扩容和伸缩.<ul><li>相对于<code>replicationController</code>的主要改进是它更具表达力的标签选择器</li><li>通常不会直接创建,而是在创建更高级的<code>Deployment</code>资源时自动创建<code>ReplicaSet</code>.</li></ul></li><li><strong>DaemonSet</strong>: <code>DaemonSet</code>保证每个<code>Node</code>上都运行一个容器副本,常用来部署一些集群的日志,监控或者其他系统管理应用.典型的应用包括:<ul><li><strong>日志收集</strong>:比如<code>fluentd</code>,<code>logstash</code>等</li><li><strong>系统监控</strong>:比如<code>Prometheus Node Exporter</code>,<code>collectd</code>,<code>New Relic agent,Ganglia gmond</code>等</li><li><strong>系统程序</strong>:比如<code>kube-proxy</code>,<code>kube-dns</code>等</li></ul></li><li><strong>Job</strong>: <code>job</code>资源允许你运行一种<code>pod</code>,该<code>pod</code>内部进程成功结束时,不重启容器.一旦任务完成,<code>pod</code>就被认为处于完成状态.</li><li><strong>Cronjob</strong>: 类似于<code>Liunx</code>操作系统中的<code>cron任务</code>,在特定的时间或者指定的时间间隔内,<code>Kubernetes</code>根据<code>cronjob</code>对象中配置的<code>jobTemplate</code>属性创建<code>job</code>资源,然后<code>job</code>创建<code>pod</code>.</li><li><strong>Deployment</strong>：<code>Deployment</code> 表示部署，在内部使用<code>ReplicaSet</code> 来实现。可以通过 <code>Deployment</code> 来生成相应的 <code>ReplicaSet</code> 完成 <code>Pod</code> 副本的创建</li><li><strong>Service</strong>：<code>Service</code> 是 <code>Kubernetes</code> 最重要的资源对象。<code>Service</code> 定义了服务的访问入口，服务的调用者通过这个地址访问 <code>Service</code> 后端的 <code>Pod</code> 副本实例。<code>Service</code> 通过 <code>Label Selector</code> 同后端的 <code>Pod</code> 副本建立关系，<code>Deployment</code> 保证后端<code>Pod</code> 副本的数量，也就是保证服务的伸缩性。</li><li><strong>NodePort</strong>: 使用一个集群固定IP,但是额外在每个<code>Pod</code>上均暴露这个服务和端口</li></ul><p><img src="nodeport.JPG" alt="外部客户端通过节点连接到NodePort服务"></p><ul><li><strong>LoadBalance</strong>: 使用集群固定IP,和<code>NodePort</code>,额外还会申请一个负载均衡器来转发到服务和端口</li></ul><p><img src="loadbalancer.JPG" alt="外部客户端连接一个LoadBalancer服务"></p><ul><li><strong>Ingress</strong>: 通常情况下,<code>service</code>和<code>pod</code>的IP仅可在集群内部访问.集群外部的请求需要通过负载均衡转发到<code>service</code>在<code>Node</code>上暴露的<code>NodePort</code>上,再由<code>kube-proxy</code>将其转发到相关的<code>Pod</code>.而<code>Ingress</code>就是为进入集群的请求提供路由规则的集合.<code>Ingress</code>可以给<code>service</code>提供集群外部访问的<code>URL</code>,负载均衡,<code>ssl</code>中止,<code>HTTP</code>路由等.</li></ul><p><img src="ingress.JPG" alt="通过一个Ingress暴露多个服务"></p><ul><li><strong>headless</strong>: 简单理解为不需要<code>Cluster</code>的<code>Service</code>.</li><li><strong>emptyDir卷</strong>: 卷从一个空目录开始,运行在<code>pod</code>内的应用程序可以写入它需要的任何文件.卷的生命周期与<code>pod</code>的生命周期相关联,所以当删除<code>pod</code>时,卷的内容就会丢失.</li><li><strong>hostPath卷</strong>: <code>hostPath</code>卷指向节点文件系统上的指定文件或目录.<code>hosPath</code>卷的内容存储在特定节点的文件系统上,当<code>pod</code>被重新安排在另一个节点时,会找不到数据.</li><li><strong>PersistentVolume</strong>: 持久卷,简称<code>PV</code>,不属于任何命名空间,跟<code>Node</code>(节点)一样是集群层面的资源.</li><li><strong>PersistentVolumeClaim</strong>: 持久卷声明,简称<code>PVC</code>,集群用户需要在<code>Pod</code>中使用持久化存储时,首先要创建持久卷声明清单,指定所需要的最低容量要求和访问模式,然后提交给<code>Kubernetes API</code> 服务器,<code>Kubernetes</code>找到可匹配的持久卷并将其绑定到持久卷声明.</li><li><strong>ConfigMap</strong>: <code>Kubernetes</code>允许将配置选项分离到单独的资源对象<code>ConfigMap</code>中,本质是一个键/值对映射,值可以实短字面量,也可以是完整的配置文件.</li><li><strong>Secret</strong>: <code>ConfigMap</code>适用于传递非敏感数据,然而配置通常会包含一些敏感数据,如证书和私钥,为了存储这类信息,<code>Kubernetes</code>提供了<code>Secret</code>资源对象.<code>Secret</code>结构与<code>ConfigMap</code>类似,均是键/值对映射.</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href></a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kubernetes基本概念&quot;&gt;&lt;a href=&quot;#Kubernetes基本概念&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes基本概念&quot;&gt;&lt;/a&gt;Kubernetes基本概念&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Master&lt;/
      
    
    </summary>
    
      <category term="DevOps" scheme="http://saltci.xyz/categories/DevOps/"/>
    
      <category term="Kubernetes" scheme="http://saltci.xyz/categories/DevOps/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://saltci.xyz/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Docker使用指南</title>
    <link href="http://saltci.xyz/DevOps/Docker/Docker%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://saltci.xyz/DevOps/Docker/Docker使用指南/</id>
    <published>2020-01-13T13:36:03.000Z</published>
    <updated>2020-11-27T07:02:13.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker容器使用"><a href="#Docker容器使用" class="headerlink" title="Docker容器使用"></a>Docker容器使用</h1><ul><li>启动容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kubia-container -p 8080:8080 -d kubia</span><br><span class="line"><span class="meta">#</span> -d:后台运行</span><br><span class="line">docker run -it ubuntu /bin/bash</span><br><span class="line"><span class="meta">#</span> -i：交互式操作  -t:分配一个伪终端  /bin/bash:放在镜像名后的时命令</span><br><span class="line"><span class="meta">#</span> 使用exit退出终端</span><br></pre></td></tr></table></figure><ul><li>查看容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps # 列出运行中的容器</span><br><span class="line">docker ps -a # 列出所有的容器</span><br><span class="line">docker inspect &lt;docker_name or docker_id&gt; # 获取更多的容器信息</span><br></pre></td></tr></table></figure><ul><li>进入容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it kubia-container bash</span><br><span class="line"><span class="meta">#</span> windows下使用该命令可能会遇到:the input device is not a tty,使用winpty解决问题</span><br><span class="line"><span class="meta">#</span> https://stackoverflow.com/questions/43099116/error-the-input-device-is-not-a-tty </span><br><span class="line">winpty docker exec -it some_cassandra bash</span><br></pre></td></tr></table></figure><ul><li>停止和删除容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop kubia-container</span><br><span class="line">docker rm kubia-container</span><br></pre></td></tr></table></figure><ul><li>查看容器日志</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f &lt;容器名 or 容器id&gt;</span><br></pre></td></tr></table></figure><h1 id="Docker镜像使用"><a href="#Docker镜像使用" class="headerlink" title="Docker镜像使用"></a>Docker镜像使用</h1><ul><li>获取镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull python:3.6</span><br></pre></td></tr></table></figure><ul><li>查看镜像列表</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"><span class="meta">#</span> REPOSITORY: 表示镜像仓库源</span><br><span class="line"><span class="meta">#</span> TAG: 镜像标签</span><br><span class="line"><span class="meta">#</span> IMAGE ID:镜像ID</span><br><span class="line"><span class="meta">#</span> CREATE: 镜像创建时间</span><br></pre></td></tr></table></figure><ul><li>查找镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search httpd</span><br></pre></td></tr></table></figure><ul><li>删除镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi &lt;镜像id or 镜像名&gt;</span><br></pre></td></tr></table></figure><ul><li>构建镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t runoob/centos:6.7 .</span><br></pre></td></tr></table></figure><ul><li>设置镜像标签</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag &lt;镜像id&gt; runoob/centos:dev</span><br></pre></td></tr></table></figure><h1 id="Docker仓库管理"><a href="#Docker仓库管理" class="headerlink" title="Docker仓库管理"></a>Docker仓库管理</h1><ul><li>登录和退出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br><span class="line">docker logout</span><br></pre></td></tr></table></figure><ul><li>拉取镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull python:3.6</span><br></pre></td></tr></table></figure><ul><li>推送镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag kubia username/kubia # 使用附加标签标注镜像</span><br><span class="line">docker push username/kubia # 推送镜像</span><br></pre></td></tr></table></figure><ul><li>搜索镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search username/kubia</span><br></pre></td></tr></table></figure><h1 id="Dockerfile常用指令"><a href="#Dockerfile常用指令" class="headerlink" title="Dockerfile常用指令"></a>Dockerfile常用指令</h1><ul><li><strong>FROM</strong>：基础镜像，后续操作都是基于这个基础镜像</li><li><strong>MAINTAINER</strong>：用来指定维护者信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAINTAINER xxx xxxx@example.com</span><br></pre></td></tr></table></figure><ul><li><strong>RUN</strong>： 用于执行后面跟着的命令行命令,在<code>docker build</code>时运行</li><li><strong>COPY</strong>：复制指令，从上下文目录中复制文件或者目录到容器的制定路径</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;... &lt;目标路径&gt;</span><br><span class="line"><span class="meta">#</span> [--chown=&lt;user&gt;:&lt;group&gt;]：可选参数，用户改变复制到容器内文件的拥有者和属组</span><br><span class="line"><span class="meta">#</span> &lt;源路径&gt;:源文件或目录，这里可以是通配符表达式，起通配符规则要满足Go的filepath.Match规则，如:</span><br><span class="line">COPY hom* /mydir/</span><br><span class="line">COPY home?.txt /mydir/</span><br><span class="line"><span class="meta">#</span> &lt;目标路径&gt;:容器内制定路径，不存在则自动创建</span><br></pre></td></tr></table></figure><ul><li><strong>ADD</strong>：和<code>COPY</code>的使用格式一致，功能类似，不同之处在于：<ul><li>ADD的优点：在执行<code>&lt;源文件&gt;</code>为<code>tar</code>压缩文件的话，压缩格式为<code>gzip</code>,<code>bzip2</code>以及<code>xz</code>的情况下，会自动复制并加压到<code>&lt;目标路径&gt;</code></li><li>ADD的缺点：在不解压的前提下，无法复制<code>tar</code>压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li></ul></li><li><strong>CMD</strong>：类似于<code>RUN</code>命令，在<code>docker run</code>时运行<ul><li>作用：为启动的容器制定要运行的程序，程序运行结束，容器也就结束。</li><li>注:如果<code>Dockerfile</code>中存在多个<code>CMD</code>指令，仅最后一个有效</li><li>会被<code>docker run</code>命令行参数中指定要运行的程序覆盖</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMD command param1 param2 # 在/bin/bash 中执行，提供给需要交互的应用</span><br><span class="line">CMD ["&lt;可执行文件或命令&gt;","&lt;param1&gt;","&lt;param2&gt;"] # 使用exec执行，推荐方式</span><br><span class="line">CMD ["&lt;param1&gt;","&lt;param2&gt;",...] # 为 ENTRYPOINT指令指定的程序提供默认参数</span><br></pre></td></tr></table></figure><ul><li><strong>ENTRYPOINT</strong>：类似于<code>CMD</code>指令，不会被<code>docker run</code>的命令行参数指定的指令覆盖，这些命令行参数会被当做参数传递给<code>ENTRYPOINT</code>指令指定的程序。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT ["nginx", "-c"] # 定参数</span><br><span class="line">CMD ["/etc/nginx/nginx.conf"] # 变参</span><br></pre></td></tr></table></figure><ul><li><strong>ENV</strong>：定义环境变量，在后续的指令中，可以使用这个环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;Key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure><ul><li><strong>VOLUME</strong>：定义匿名数据卷。建议在启动容器<code>docker run</code>时，通过<code>-v</code>参数修改挂载点</li><li><strong>EXPOSE</strong>：声明端口</li><li><strong>WORKDIR</strong>：指定工作目录，会在构建镜像中的每一层都存在，<code>WORKDIR</code>指定的工作目录，必须是提前建好的。</li></ul><h1 id="Dockerfile示例"><a href="#Dockerfile示例" class="headerlink" title="Dockerfile示例"></a>Dockerfile示例</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6</span><br><span class="line"></span><br><span class="line">RUN mkdir -p /app &amp;&amp; mkdir -p /var/log/gunicorn</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY requirements.txt /app/requirements.txt</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">COPY . /app</span><br><span class="line">EXPOSE 80 8000</span><br><span class="line">CMD ["gunicorn","-w","1","-k","gthread","-b","0.0.0.0:8000","manage:app"]</span><br></pre></td></tr></table></figure><ul><li>构建镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t flask_project:test .</span><br></pre></td></tr></table></figure><p><img src="dockerfile_build_images.png" alt="基于Dockerfile构建一个新的容器镜像"></p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="Linux无需sudo执行docker命令"><a href="#Linux无需sudo执行docker命令" class="headerlink" title="Linux无需sudo执行docker命令"></a>Linux无需sudo执行docker命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.创建一个docker用户组</span><br><span class="line">sudo groupadd docker</span><br><span class="line">2.添加当前用户到docker用户组</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://www.tianmaying.com/tutorial/dockerfile" rel="external nofollow noopener noreferrer" target="_blank">Dockerfile详解以及Flask项目Dockerfile示例</a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker容器使用&quot;&gt;&lt;a href=&quot;#Docker容器使用&quot; class=&quot;headerlink&quot; title=&quot;Docker容器使用&quot;&gt;&lt;/a&gt;Docker容器使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;启动容器&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="DevOps" scheme="http://saltci.xyz/categories/DevOps/"/>
    
      <category term="Docker" scheme="http://saltci.xyz/categories/DevOps/Docker/"/>
    
    
      <category term="Docker" scheme="http://saltci.xyz/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令总结</title>
    <link href="http://saltci.xyz/Git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://saltci.xyz/Git/git常用命令总结/</id>
    <published>2020-01-11T15:43:34.000Z</published>
    <updated>2020-11-27T07:02:13.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-pull时冲突的几种解决方式"><a href="#git-pull时冲突的几种解决方式" class="headerlink" title="git pull时冲突的几种解决方式"></a>git pull时冲突的几种解决方式</h2><ul><li>使用git stash 命令进行处理 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.先将本地修改存储起来</span><br><span class="line">git stash</span><br><span class="line"><span class="meta">#</span> 这样本地修改就都被暂时存储起来，使用git stash list可以查看保存的信息</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.pull内容</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3.还原暂存内容</span><br><span class="line">git stash pop stash@&#123;0&#125;</span><br><span class="line"><span class="meta">#</span> 然后系统会自动合并并修改内容，但是其中有冲突的地方需要解决其中的冲突</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4.解决文件中冲突的部分</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstream</span><br><span class="line">int i, j;</span><br><span class="line">=======</span><br><span class="line">int i, z;</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt; Stashed changes</span><br><span class="line"><span class="meta">#</span> Updated upstream 和=====之间的内容就是pull下来的内容</span><br><span class="line"><span class="meta">#</span> ====和stashed changes之间的内容就是本地修改的内容</span><br><span class="line"><span class="meta">#</span> 解决完之后就可以正常提交了</span><br></pre></td></tr></table></figure><h2 id="同一客户端使用多个git账号"><a href="#同一客户端使用多个git账号" class="headerlink" title="同一客户端使用多个git账号"></a>同一客户端使用多个git账号</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.生成多个SSH key</span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_two -C "new mail"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.配置~/.ssh/config文件</span><br><span class="line"><span class="meta">#</span> Default Github user</span><br><span class="line">Host one.github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User one</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_one</span><br><span class="line"><span class="meta">#</span> Second Github user</span><br><span class="line"><span class="meta">#</span> 建一个github别名，新建账号使用这个别名做克隆和更新</span><br><span class="line">Host two.github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User two</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_two</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3.测试</span><br><span class="line">ssh -T git@one.github.com</span><br><span class="line"><span class="meta">#</span> Hi IEIT! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"><span class="meta">#</span> 出现上边这句，表示链接成功</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4.用户名和邮箱配置</span><br><span class="line"><span class="meta">#</span> 取消全局用户名和邮箱配置</span><br><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br><span class="line"><span class="meta">#</span> 设置局部 用户名/邮箱 配置</span><br><span class="line">git config user.name "xxxx"</span><br><span class="line">git config user.email "xxx@xxx.com"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 5.使用git</span><br><span class="line">git clone git@one.github.com:用户名/example.git</span><br><span class="line"><span class="meta">#</span> 已经存在的需要重建origin</span><br><span class="line">git remote rm origin # 清空origin</span><br><span class="line">git remote add origin git@one.github.com:one/example.git</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建本地标签</span><br><span class="line">git tag v1.0.0</span><br><span class="line"><span class="meta">#</span> 指定commit打标签</span><br><span class="line">git tag v0.9 f52c633</span><br><span class="line"><span class="meta">#</span> 查看标签信息</span><br><span class="line">git show v0.9</span><br><span class="line"><span class="meta">#</span> 创建带说明的标签</span><br><span class="line">git tag -a v0.1 -m "version 0.1 released" 1094abd</span><br><span class="line"><span class="meta">#</span> 推送Tag到远程</span><br><span class="line">git push origin v1.0</span><br><span class="line"><span class="meta">#</span> 推送本地所有标签到远程</span><br><span class="line">git push origin --tags</span><br><span class="line"><span class="meta">#</span> 删除本地标签</span><br><span class="line">git tag --delete v1.0.0</span><br><span class="line"><span class="meta">#</span> 删除远程标签</span><br><span class="line">git push origin :refs/tags/v1.0.0</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.jianshu.com/p/89cb26e5c3e8" rel="external nofollow noopener noreferrer" target="_blank">同一客户端下使用多个git账号</a></li><li><a href="https://blog.csdn.net/qq_34634812/article/details/90168486" rel="external nofollow noopener noreferrer" target="_blank">同一台电脑上使用两个 github 账号</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git-pull时冲突的几种解决方式&quot;&gt;&lt;a href=&quot;#git-pull时冲突的几种解决方式&quot; class=&quot;headerlink&quot; title=&quot;git pull时冲突的几种解决方式&quot;&gt;&lt;/a&gt;git pull时冲突的几种解决方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Git" scheme="http://saltci.xyz/categories/Git/"/>
    
    
      <category term="git" scheme="http://saltci.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Welcome Saltci&#39;s Wiki Site</title>
    <link href="http://saltci.xyz/index/"/>
    <id>http://saltci.xyz/index/</id>
    <published>2020-01-11T12:11:57.000Z</published>
    <updated>2020-11-27T07:02:13.806Z</updated>
    
    <content type="html"><![CDATA[<p>这是 saltci 的个人 Wiki 站点，使用基于Hexo的Wiki主题<a href="https://github.com/zthxxx/hexo-theme-Wikitten" rel="external nofollow noopener noreferrer" target="_blank">hexo-theme-Wikitten</a>来记录一些只言片语。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是 saltci 的个人 Wiki 站点，使用基于Hexo的Wiki主题&lt;a href=&quot;https://github.com/zthxxx/hexo-theme-Wikitten&quot; rel=&quot;external nofollow noopener noreferrer&quot; 
      
    
    </summary>
    
    
  </entry>
  
</feed>
